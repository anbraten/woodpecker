// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for LogEntryType.
const (
	LogEntryExitCode LogEntryType = 2
	LogEntryMetadata LogEntryType = 3
	LogEntryProgress LogEntryType = 4
	LogEntryStderr   LogEntryType = 1
	LogEntryStdout   LogEntryType = 0
)

// Defines values for RepoVisibility.
const (
	VisibilityInternal RepoVisibility = "internal"
	VisibilityPrivate  RepoVisibility = "private"
	VisibilityPublic   RepoVisibility = "public"
)

// Defines values for SCMKind.
const (
	RepoFossil   SCMKind = "fossil"
	RepoGit      SCMKind = "git"
	RepoHg       SCMKind = "hg"
	RepoPerforce SCMKind = "perforce"
)

// Defines values for StatusValue.
const (
	StatusBlocked  StatusValue = "blocked"
	StatusCreated  StatusValue = "created"
	StatusDeclined StatusValue = "declined"
	StatusError    StatusValue = "error"
	StatusFailure  StatusValue = "failure"
	StatusKilled   StatusValue = "killed"
	StatusPending  StatusValue = "pending"
	StatusRunning  StatusValue = "running"
	StatusSkipped  StatusValue = "skipped"
	StatusSuccess  StatusValue = "success"
)

// Defines values for StepType.
const (
	StepTypeCache    StepType = "cache"
	StepTypeClone    StepType = "clone"
	StepTypeCommands StepType = "commands"
	StepTypePlugin   StepType = "plugin"
	StepTypeService  StepType = "service"
)

// Defines values for WebhookEvent.
const (
	EventCron       WebhookEvent = "cron"
	EventDeploy     WebhookEvent = "deployment"
	EventManual     WebhookEvent = "manual"
	EventPull       WebhookEvent = "pull_request"
	EventPullClosed WebhookEvent = "pull_request_closed"
	EventPush       WebhookEvent = "push"
	EventRelease    WebhookEvent = "release"
	EventTag        WebhookEvent = "tag"
)

// Defines values for ModelForgeType.
const (
	ForgeTypeAddon               ModelForgeType = "addon"
	ForgeTypeBitbucket           ModelForgeType = "bitbucket"
	ForgeTypeBitbucketDatacenter ModelForgeType = "bitbucket-dc"
	ForgeTypeForgejo             ModelForgeType = "forgejo"
	ForgeTypeGitea               ModelForgeType = "gitea"
	ForgeTypeGithub              ModelForgeType = "github"
	ForgeTypeGitlab              ModelForgeType = "gitlab"
)

// Defines values for TypesPipelineErrorType.
const (
	PipelineErrorTypeBadHabit    TypesPipelineErrorType = "bad_habit"
	PipelineErrorTypeCompiler    TypesPipelineErrorType = "compiler"
	PipelineErrorTypeDeprecation TypesPipelineErrorType = "deprecation"
	PipelineErrorTypeGeneric     TypesPipelineErrorType = "generic"
	PipelineErrorTypeLinter      TypesPipelineErrorType = "linter"
)

// Agent defines model for Agent.
type Agent struct {
	Backend      *string            `json:"backend,omitempty"`
	Capacity     *int               `json:"capacity,omitempty"`
	Created      *int               `json:"created,omitempty"`
	CustomLabels *map[string]string `json:"custom_labels,omitempty"`
	Id           *int               `json:"id,omitempty"`
	LastContact  *int               `json:"last_contact,omitempty"`

	// LastWork last time the agent did something, this value is used to determine if the agent is still doing work used by the autoscaler
	LastWork   *int    `json:"last_work,omitempty"`
	Name       *string `json:"name,omitempty"`
	NoSchedule *bool   `json:"no_schedule,omitempty"`

	// OrgId OrgID is counted as unset if set to -1, this is done to ensure a new(Agent) still enforce the OrgID check by default
	OrgId    *int    `json:"org_id,omitempty"`
	OwnerId  *int    `json:"owner_id,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Token    *string `json:"token,omitempty"`
	Updated  *int    `json:"updated,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// Config defines model for Config.
type Config struct {
	Data *[]int  `json:"data,omitempty"`
	Hash *string `json:"hash,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Cron defines model for Cron.
type Cron struct {
	Branch    *string `json:"branch,omitempty"`
	Created   *int    `json:"created,omitempty"`
	CreatorId *int    `json:"creator_id,omitempty"`
	Id        *int    `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	NextExec  *int    `json:"next_exec,omitempty"`
	RepoId    *int    `json:"repo_id,omitempty"`

	// Schedule @weekly,	3min, ...
	Schedule *string `json:"schedule,omitempty"`
}

// Feed defines model for Feed.
type Feed struct {
	Author       *string `json:"author,omitempty"`
	AuthorAvatar *string `json:"author_avatar,omitempty"`
	AuthorEmail  *string `json:"author_email,omitempty"`
	Branch       *string `json:"branch,omitempty"`
	Commit       *string `json:"commit,omitempty"`
	Created      *int    `json:"created,omitempty"`
	Event        *string `json:"event,omitempty"`
	Finished     *int    `json:"finished,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Message      *string `json:"message,omitempty"`
	Number       *int    `json:"number,omitempty"`
	Ref          *string `json:"ref,omitempty"`
	Refspec      *string `json:"refspec,omitempty"`
	RepoId       *int    `json:"repo_id,omitempty"`
	Started      *int    `json:"started,omitempty"`
	Status       *string `json:"status,omitempty"`
	Title        *string `json:"title,omitempty"`
}

// Forge defines model for Forge.
type Forge struct {
	AdditionalOptions *map[string]interface{} `json:"additional_options,omitempty"`
	Client            *string                 `json:"client,omitempty"`
	Id                *int                    `json:"id,omitempty"`

	// OauthHost public url for oauth if different from url
	OauthHost  *string         `json:"oauth_host,omitempty"`
	SkipVerify *bool           `json:"skip_verify,omitempty"`
	Type       *ModelForgeType `json:"type,omitempty"`
	Url        *string         `json:"url,omitempty"`
}

// LogEntry defines model for LogEntry.
type LogEntry struct {
	Data   *[]int        `json:"data,omitempty"`
	Id     *int          `json:"id,omitempty"`
	Line   *int          `json:"line,omitempty"`
	StepId *int          `json:"step_id,omitempty"`
	Time   *int          `json:"time,omitempty"`
	Type   *LogEntryType `json:"type,omitempty"`
}

// LogEntryType defines model for LogEntryType.
type LogEntryType int

// Org defines model for Org.
type Org struct {
	ForgeId *int    `json:"forge_id,omitempty"`
	Id      *int    `json:"id,omitempty"`
	IsUser  *bool   `json:"is_user,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// OrgPerm defines model for OrgPerm.
type OrgPerm struct {
	Admin  *bool `json:"admin,omitempty"`
	Member *bool `json:"member,omitempty"`
}

// Perm defines model for Perm.
type Perm struct {
	Admin   *bool `json:"admin,omitempty"`
	Created *int  `json:"created,omitempty"`
	Pull    *bool `json:"pull,omitempty"`
	Push    *bool `json:"push,omitempty"`
	Synced  *int  `json:"synced,omitempty"`
	Updated *int  `json:"updated,omitempty"`
}

// Pipeline defines model for Pipeline.
type Pipeline struct {
	Author       *string               `json:"author,omitempty"`
	AuthorAvatar *string               `json:"author_avatar,omitempty"`
	AuthorEmail  *string               `json:"author_email,omitempty"`
	Branch       *string               `json:"branch,omitempty"`
	ChangedFiles *[]string             `json:"changed_files,omitempty"`
	Commit       *string               `json:"commit,omitempty"`
	Created      *int                  `json:"created,omitempty"`
	DeployTask   *string               `json:"deploy_task,omitempty"`
	DeployTo     *string               `json:"deploy_to,omitempty"`
	Errors       *[]TypesPipelineError `json:"errors,omitempty"`
	Event        *WebhookEvent         `json:"event,omitempty"`
	Finished     *int                  `json:"finished,omitempty"`
	ForgeUrl     *string               `json:"forge_url,omitempty"`
	Id           *int                  `json:"id,omitempty"`
	IsPrerelease *bool                 `json:"is_prerelease,omitempty"`
	Message      *string               `json:"message,omitempty"`
	Number       *int                  `json:"number,omitempty"`
	Parent       *int                  `json:"parent,omitempty"`
	PrLabels     *[]string             `json:"pr_labels,omitempty"`
	Ref          *string               `json:"ref,omitempty"`
	Refspec      *string               `json:"refspec,omitempty"`
	Reviewed     *int                  `json:"reviewed,omitempty"`
	ReviewedBy   *string               `json:"reviewed_by,omitempty"`

	// Sender uses reported user for webhooks and name of cron for cron pipelines
	Sender    *string            `json:"sender,omitempty"`
	Started   *int               `json:"started,omitempty"`
	Status    *StatusValue       `json:"status,omitempty"`
	Timestamp *int               `json:"timestamp,omitempty"`
	Title     *string            `json:"title,omitempty"`
	Updated   *int               `json:"updated,omitempty"`
	Variables *map[string]string `json:"variables,omitempty"`
	Workflows *[]ModelWorkflow   `json:"workflows,omitempty"`
}

// PipelineOptions defines model for PipelineOptions.
type PipelineOptions struct {
	Branch    *string            `json:"branch,omitempty"`
	Variables *map[string]string `json:"variables,omitempty"`
}

// PullRequest defines model for PullRequest.
type PullRequest struct {
	Index *string `json:"index,omitempty"`
	Title *string `json:"title,omitempty"`
}

// Registry defines model for Registry.
type Registry struct {
	Address  *string `json:"address,omitempty"`
	Id       *int    `json:"id,omitempty"`
	OrgId    *int    `json:"org_id,omitempty"`
	Password *string `json:"password,omitempty"`
	Readonly *bool   `json:"readonly,omitempty"`
	RepoId   *int    `json:"repo_id,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Repo defines model for Repo.
type Repo struct {
	Active                       *bool           `json:"active,omitempty"`
	AllowDeploy                  *bool           `json:"allow_deploy,omitempty"`
	AllowPr                      *bool           `json:"allow_pr,omitempty"`
	AvatarUrl                    *string         `json:"avatar_url,omitempty"`
	CancelPreviousPipelineEvents *[]WebhookEvent `json:"cancel_previous_pipeline_events,omitempty"`
	CloneUrl                     *string         `json:"clone_url,omitempty"`
	CloneUrlSsh                  *string         `json:"clone_url_ssh,omitempty"`
	ConfigFile                   *string         `json:"config_file,omitempty"`
	DefaultBranch                *string         `json:"default_branch,omitempty"`
	ForgeId                      *int            `json:"forge_id,omitempty"`

	// ForgeRemoteId ForgeRemoteID is the unique identifier for the repository on the forge.
	ForgeRemoteId    *string                    `json:"forge_remote_id,omitempty"`
	ForgeUrl         *string                    `json:"forge_url,omitempty"`
	FullName         *string                    `json:"full_name,omitempty"`
	Gated            *bool                      `json:"gated,omitempty"`
	Id               *int                       `json:"id,omitempty"`
	Name             *string                    `json:"name,omitempty"`
	NetrcOnlyTrusted *bool                      `json:"netrc_only_trusted,omitempty"`
	OrgId            *int                       `json:"org_id,omitempty"`
	Owner            *string                    `json:"owner,omitempty"`
	PrEnabled        *bool                      `json:"pr_enabled,omitempty"`
	Private          *bool                      `json:"private,omitempty"`
	Scm              *SCMKind                   `json:"scm,omitempty"`
	Timeout          *int                       `json:"timeout,omitempty"`
	Trusted          *ModelTrustedConfiguration `json:"trusted,omitempty"`
	Visibility       *RepoVisibility            `json:"visibility,omitempty"`
}

// RepoPatch defines model for RepoPatch.
type RepoPatch struct {
	AllowDeploy                  *bool                           `json:"allow_deploy,omitempty"`
	AllowPr                      *bool                           `json:"allow_pr,omitempty"`
	CancelPreviousPipelineEvents *[]WebhookEvent                 `json:"cancel_previous_pipeline_events,omitempty"`
	ConfigFile                   *string                         `json:"config_file,omitempty"`
	Gated                        *bool                           `json:"gated,omitempty"`
	NetrcOnlyTrusted             *bool                           `json:"netrc_only_trusted,omitempty"`
	Timeout                      *int                            `json:"timeout,omitempty"`
	Trusted                      *ModelTrustedConfigurationPatch `json:"trusted,omitempty"`
	Visibility                   *string                         `json:"visibility,omitempty"`
}

// RepoVisibility defines model for RepoVisibility.
type RepoVisibility string

// SCMKind defines model for SCMKind.
type SCMKind string

// Secret defines model for Secret.
type Secret struct {
	Events *[]WebhookEvent `json:"events,omitempty"`
	Id     *int            `json:"id,omitempty"`
	Images *[]string       `json:"images,omitempty"`
	Name   *string         `json:"name,omitempty"`
	OrgId  *int            `json:"org_id,omitempty"`
	RepoId *int            `json:"repo_id,omitempty"`
	Value  *string         `json:"value,omitempty"`
}

// StatusValue defines model for StatusValue.
type StatusValue string

// Step defines model for Step.
type Step struct {
	Error      *string      `json:"error,omitempty"`
	ExitCode   *int         `json:"exit_code,omitempty"`
	Finished   *int         `json:"finished,omitempty"`
	Id         *int         `json:"id,omitempty"`
	Name       *string      `json:"name,omitempty"`
	Pid        *int         `json:"pid,omitempty"`
	PipelineId *int         `json:"pipeline_id,omitempty"`
	Ppid       *int         `json:"ppid,omitempty"`
	Started    *int         `json:"started,omitempty"`
	State      *StatusValue `json:"state,omitempty"`
	Type       *StepType    `json:"type,omitempty"`
	Uuid       *string      `json:"uuid,omitempty"`
}

// StepType defines model for StepType.
type StepType string

// Task defines model for Task.
type Task struct {
	AgentId      *int                    `json:"agent_id,omitempty"`
	DepStatus    *map[string]StatusValue `json:"dep_status,omitempty"`
	Dependencies *[]string               `json:"dependencies,omitempty"`
	Id           *string                 `json:"id,omitempty"`
	Labels       *map[string]string      `json:"labels,omitempty"`
	RunOn        *[]string               `json:"run_on,omitempty"`
}

// User defines model for User.
type User struct {
	// Admin Admin indicates the user is a system administrator.
	//
	// NOTE: If the username is part of the WOODPECKER_ADMIN
	// environment variable, this value will be set to true on login.
	Admin *bool `json:"admin,omitempty"`

	// AvatarUrl the avatar url for this user.
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Email Email is the email address for this user.
	//
	// required: true
	Email   *string `json:"email,omitempty"`
	ForgeId *int    `json:"forge_id,omitempty"`

	// Id the id for this user.
	//
	// required: true
	Id *int `json:"id,omitempty"`

	// Login Login is the username for this user.
	//
	// required: true
	Login *string `json:"login,omitempty"`

	// OrgId OrgID is the of the user as model.Org.
	OrgId *int `json:"org_id,omitempty"`
}

// WebhookEvent defines model for WebhookEvent.
type WebhookEvent string

// MetadataAuthor defines model for metadata.Author.
type MetadataAuthor struct {
	Avatar *string `json:"avatar,omitempty"`
	Email  *string `json:"email,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// MetadataCommit defines model for metadata.Commit.
type MetadataCommit struct {
	Author       *MetadataAuthor `json:"author,omitempty"`
	Branch       *string         `json:"branch,omitempty"`
	ChangedFiles *[]string       `json:"changed_files,omitempty"`
	IsPrerelease *bool           `json:"is_prerelease,omitempty"`
	Labels       *[]string       `json:"labels,omitempty"`
	Message      *string         `json:"message,omitempty"`
	Ref          *string         `json:"ref,omitempty"`
	Refspec      *string         `json:"refspec,omitempty"`
	Sha          *string         `json:"sha,omitempty"`
}

// MetadataForge defines model for metadata.Forge.
type MetadataForge struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// MetadataMetadata defines model for metadata.Metadata.
type MetadataMetadata struct {
	Curr     *MetadataPipeline `json:"curr,omitempty"`
	Forge    *MetadataForge    `json:"forge,omitempty"`
	Id       *string           `json:"id,omitempty"`
	Prev     *MetadataPipeline `json:"prev,omitempty"`
	Repo     *MetadataRepo     `json:"repo,omitempty"`
	Step     *MetadataStep     `json:"step,omitempty"`
	Sys      *MetadataSystem   `json:"sys,omitempty"`
	Workflow *MetadataWorkflow `json:"workflow,omitempty"`
}

// MetadataPipeline defines model for metadata.Pipeline.
type MetadataPipeline struct {
	Commit   *MetadataCommit `json:"commit,omitempty"`
	Created  *int            `json:"created,omitempty"`
	Cron     *string         `json:"cron,omitempty"`
	Event    *string         `json:"event,omitempty"`
	Finished *int            `json:"finished,omitempty"`
	ForgeUrl *string         `json:"forge_url,omitempty"`
	Number   *int            `json:"number,omitempty"`
	Parent   *int            `json:"parent,omitempty"`
	Started  *int            `json:"started,omitempty"`
	Status   *string         `json:"status,omitempty"`
	Target   *string         `json:"target,omitempty"`
	Task     *string         `json:"task,omitempty"`
}

// MetadataRepo defines model for metadata.Repo.
type MetadataRepo struct {
	CloneUrl      *string                       `json:"clone_url,omitempty"`
	CloneUrlSsh   *string                       `json:"clone_url_ssh,omitempty"`
	DefaultBranch *string                       `json:"default_branch,omitempty"`
	ForgeUrl      *string                       `json:"forge_url,omitempty"`
	Id            *int                          `json:"id,omitempty"`
	Name          *string                       `json:"name,omitempty"`
	Owner         *string                       `json:"owner,omitempty"`
	Private       *bool                         `json:"private,omitempty"`
	RemoteId      *string                       `json:"remote_id,omitempty"`
	Scm           *string                       `json:"scm,omitempty"`
	Trusted       *MetadataTrustedConfiguration `json:"trusted,omitempty"`
}

// MetadataStep defines model for metadata.Step.
type MetadataStep struct {
	Name   *string `json:"name,omitempty"`
	Number *int    `json:"number,omitempty"`
}

// MetadataSystem defines model for metadata.System.
type MetadataSystem struct {
	Arch    *string `json:"arch,omitempty"`
	Host    *string `json:"host,omitempty"`
	Name    *string `json:"name,omitempty"`
	Url     *string `json:"url,omitempty"`
	Version *string `json:"version,omitempty"`
}

// MetadataTrustedConfiguration defines model for metadata.TrustedConfiguration.
type MetadataTrustedConfiguration struct {
	Network  *bool `json:"network,omitempty"`
	Security *bool `json:"security,omitempty"`
	Volumes  *bool `json:"volumes,omitempty"`
}

// MetadataWorkflow defines model for metadata.Workflow.
type MetadataWorkflow struct {
	Matrix *map[string]string `json:"matrix,omitempty"`
	Name   *string            `json:"name,omitempty"`
	Number *int               `json:"number,omitempty"`
}

// ModelForgeType defines model for model.ForgeType.
type ModelForgeType string

// ModelTrustedConfiguration defines model for model.TrustedConfiguration.
type ModelTrustedConfiguration struct {
	Network  *bool `json:"network,omitempty"`
	Security *bool `json:"security,omitempty"`
	Volumes  *bool `json:"volumes,omitempty"`
}

// ModelTrustedConfigurationPatch defines model for model.TrustedConfigurationPatch.
type ModelTrustedConfigurationPatch struct {
	Network  *bool `json:"network,omitempty"`
	Security *bool `json:"security,omitempty"`
	Volumes  *bool `json:"volumes,omitempty"`
}

// ModelWorkflow defines model for model.Workflow.
type ModelWorkflow struct {
	AgentId    *int               `json:"agent_id,omitempty"`
	Children   *[]Step            `json:"children,omitempty"`
	Environ    *map[string]string `json:"environ,omitempty"`
	Error      *string            `json:"error,omitempty"`
	Finished   *int               `json:"finished,omitempty"`
	Id         *int               `json:"id,omitempty"`
	Name       *string            `json:"name,omitempty"`
	Pid        *int               `json:"pid,omitempty"`
	PipelineId *int               `json:"pipeline_id,omitempty"`
	Platform   *string            `json:"platform,omitempty"`
	Started    *int               `json:"started,omitempty"`
	State      *StatusValue       `json:"state,omitempty"`
}

// TypesPipelineError defines model for types.PipelineError.
type TypesPipelineError struct {
	Data      *interface{}            `json:"data,omitempty"`
	IsWarning *bool                   `json:"is_warning,omitempty"`
	Message   *string                 `json:"message,omitempty"`
	Type      *TypesPipelineErrorType `json:"type,omitempty"`
}

// TypesPipelineErrorType defines model for types.PipelineErrorType.
type TypesPipelineErrorType string

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostAgentsParams defines parameters for PostAgents.
type PostAgentsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteAgentsAgentIdParams defines parameters for DeleteAgentsAgentId.
type DeleteAgentsAgentIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetAgentsAgentIdParams defines parameters for GetAgentsAgentId.
type GetAgentsAgentIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchAgentsAgentIdParams defines parameters for PatchAgentsAgentId.
type PatchAgentsAgentIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetAgentsAgentIdTasksParams defines parameters for GetAgentsAgentIdTasks.
type GetAgentsAgentIdTasksParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofParams defines parameters for GetDebugPprof.
type GetDebugPprofParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofBlockParams defines parameters for GetDebugPprofBlock.
type GetDebugPprofBlockParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofCmdlineParams defines parameters for GetDebugPprofCmdline.
type GetDebugPprofCmdlineParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofGoroutineParams defines parameters for GetDebugPprofGoroutine.
type GetDebugPprofGoroutineParams struct {
	// Debug Use debug=2 as a query parameter to export in the same format as an un-recovered panic
	Debug *int `form:"debug,omitempty" json:"debug,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofHeapParams defines parameters for GetDebugPprofHeap.
type GetDebugPprofHeapParams struct {
	// Gc You can specify gc=heap to run GC before taking the heap sample
	Gc *string `form:"gc,omitempty" json:"gc,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofProfileParams defines parameters for GetDebugPprofProfile.
type GetDebugPprofProfileParams struct {
	// Seconds You can specify the duration in the seconds GET parameter.
	Seconds int `form:"seconds" json:"seconds"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofSymbolParams defines parameters for GetDebugPprofSymbol.
type GetDebugPprofSymbolParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostDebugPprofSymbolParams defines parameters for PostDebugPprofSymbol.
type PostDebugPprofSymbolParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofThreadcreateParams defines parameters for GetDebugPprofThreadcreate.
type GetDebugPprofThreadcreateParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetDebugPprofTraceParams defines parameters for GetDebugPprofTrace.
type GetDebugPprofTraceParams struct {
	// Seconds You can specify the duration in the seconds GET parameter.
	Seconds int `form:"seconds" json:"seconds"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetForgesParams defines parameters for GetForges.
type GetForgesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization *string `json:"Authorization,omitempty"`
}

// PostForgesParams defines parameters for PostForges.
type PostForgesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteForgesForgeIdParams defines parameters for DeleteForgesForgeId.
type DeleteForgesForgeIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetForgesForgeIdParams defines parameters for GetForgesForgeId.
type GetForgesForgeIdParams struct {
	// Authorization Insert your personal access token
	Authorization *string `json:"Authorization,omitempty"`
}

// PatchForgesForgeIdParams defines parameters for PatchForgesForgeId.
type PatchForgesForgeIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostLogLevelParams defines parameters for PostLogLevel.
type PostLogLevelParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgLookupOrgFullNameParams defines parameters for GetOrgLookupOrgFullName.
type GetOrgLookupOrgFullNameParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsParams defines parameters for GetOrgs.
type GetOrgsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteOrgsIdParams defines parameters for DeleteOrgsId.
type DeleteOrgsIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdParams defines parameters for GetOrgsOrgId.
type GetOrgsOrgIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdAgentsParams defines parameters for GetOrgsOrgIdAgents.
type GetOrgsOrgIdAgentsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostOrgsOrgIdAgentsParams defines parameters for PostOrgsOrgIdAgents.
type PostOrgsOrgIdAgentsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteOrgsOrgIdAgentsAgentIdParams defines parameters for DeleteOrgsOrgIdAgentsAgentId.
type DeleteOrgsOrgIdAgentsAgentIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchOrgsOrgIdAgentsAgentIdParams defines parameters for PatchOrgsOrgIdAgentsAgentId.
type PatchOrgsOrgIdAgentsAgentIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdPermissionsParams defines parameters for GetOrgsOrgIdPermissions.
type GetOrgsOrgIdPermissionsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdRegistriesParams defines parameters for GetOrgsOrgIdRegistries.
type GetOrgsOrgIdRegistriesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostOrgsOrgIdRegistriesParams defines parameters for PostOrgsOrgIdRegistries.
type PostOrgsOrgIdRegistriesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteOrgsOrgIdRegistriesRegistryParams defines parameters for DeleteOrgsOrgIdRegistriesRegistry.
type DeleteOrgsOrgIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdRegistriesRegistryParams defines parameters for GetOrgsOrgIdRegistriesRegistry.
type GetOrgsOrgIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchOrgsOrgIdRegistriesRegistryParams defines parameters for PatchOrgsOrgIdRegistriesRegistry.
type PatchOrgsOrgIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdSecretsParams defines parameters for GetOrgsOrgIdSecrets.
type GetOrgsOrgIdSecretsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostOrgsOrgIdSecretsParams defines parameters for PostOrgsOrgIdSecrets.
type PostOrgsOrgIdSecretsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteOrgsOrgIdSecretsSecretParams defines parameters for DeleteOrgsOrgIdSecretsSecret.
type DeleteOrgsOrgIdSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetOrgsOrgIdSecretsSecretParams defines parameters for GetOrgsOrgIdSecretsSecret.
type GetOrgsOrgIdSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchOrgsOrgIdSecretsSecretParams defines parameters for PatchOrgsOrgIdSecretsSecret.
type PatchOrgsOrgIdSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetPipelinesParams defines parameters for GetPipelines.
type GetPipelinesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetQueueInfoParams defines parameters for GetQueueInfo.
type GetQueueInfoParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetQueueNorunningpipelinesParams defines parameters for GetQueueNorunningpipelines.
type GetQueueNorunningpipelinesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostQueuePauseParams defines parameters for PostQueuePause.
type PostQueuePauseParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostQueueResumeParams defines parameters for PostQueueResume.
type PostQueueResumeParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetRegistriesParams defines parameters for GetRegistries.
type GetRegistriesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostRegistriesParams defines parameters for PostRegistries.
type PostRegistriesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteRegistriesRegistryParams defines parameters for DeleteRegistriesRegistry.
type DeleteRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetRegistriesRegistryParams defines parameters for GetRegistriesRegistry.
type GetRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchRegistriesRegistryParams defines parameters for PatchRegistriesRegistry.
type PatchRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposParams defines parameters for GetRepos.
type GetReposParams struct {
	// Active only list active repos
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposParams defines parameters for PostRepos.
type PostReposParams struct {
	// ForgeRemoteId the id of a repository at the forge
	ForgeRemoteId string `form:"forge_remote_id" json:"forge_remote_id"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposLookupRepoFullNameParams defines parameters for GetReposLookupRepoFullName.
type GetReposLookupRepoFullNameParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepairParams defines parameters for PostReposRepair.
type PostReposRepairParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdParams defines parameters for DeleteReposRepoId.
type DeleteReposRepoIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdParams defines parameters for GetReposRepoId.
type GetReposRepoIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchReposRepoIdParams defines parameters for PatchReposRepoId.
type PatchReposRepoIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdBranchesParams defines parameters for GetReposRepoIdBranches.
type GetReposRepoIdBranchesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdChownParams defines parameters for PostReposRepoIdChown.
type PostReposRepoIdChownParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdCronParams defines parameters for GetReposRepoIdCron.
type GetReposRepoIdCronParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdCronParams defines parameters for PostReposRepoIdCron.
type PostReposRepoIdCronParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdCronCronParams defines parameters for DeleteReposRepoIdCronCron.
type DeleteReposRepoIdCronCronParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdCronCronParams defines parameters for GetReposRepoIdCronCron.
type GetReposRepoIdCronCronParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchReposRepoIdCronCronParams defines parameters for PatchReposRepoIdCronCron.
type PatchReposRepoIdCronCronParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdCronCronParams defines parameters for PostReposRepoIdCronCron.
type PostReposRepoIdCronCronParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdLogsNumberParams defines parameters for DeleteReposRepoIdLogsNumber.
type DeleteReposRepoIdLogsNumberParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdLogsNumberStepIDParams defines parameters for GetReposRepoIdLogsNumberStepID.
type GetReposRepoIdLogsNumberStepIDParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdLogsNumberStepIdParams defines parameters for DeleteReposRepoIdLogsNumberStepId.
type DeleteReposRepoIdLogsNumberStepIdParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdMoveParams defines parameters for PostReposRepoIdMove.
type PostReposRepoIdMoveParams struct {
	// To the username to move the repository to
	To string `form:"to" json:"to"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPermissionsParams defines parameters for GetReposRepoIdPermissions.
type GetReposRepoIdPermissionsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPipelinesParams defines parameters for GetReposRepoIdPipelines.
type GetReposRepoIdPipelinesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Before only return pipelines before this RFC3339 date
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After only return pipelines after this RFC3339 date
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdPipelinesParams defines parameters for PostReposRepoIdPipelines.
type PostReposRepoIdPipelinesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdPipelinesNumberParams defines parameters for DeleteReposRepoIdPipelinesNumber.
type DeleteReposRepoIdPipelinesNumberParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPipelinesNumberParams defines parameters for GetReposRepoIdPipelinesNumber.
type GetReposRepoIdPipelinesNumberParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdPipelinesNumberParams defines parameters for PostReposRepoIdPipelinesNumber.
type PostReposRepoIdPipelinesNumberParams struct {
	// Event override the event type
	Event *string `form:"event,omitempty" json:"event,omitempty"`

	// DeployTo override the target deploy value
	DeployTo *string `form:"deploy_to,omitempty" json:"deploy_to,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdPipelinesNumberApproveParams defines parameters for PostReposRepoIdPipelinesNumberApprove.
type PostReposRepoIdPipelinesNumberApproveParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdPipelinesNumberCancelParams defines parameters for PostReposRepoIdPipelinesNumberCancel.
type PostReposRepoIdPipelinesNumberCancelParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPipelinesNumberConfigParams defines parameters for GetReposRepoIdPipelinesNumberConfig.
type GetReposRepoIdPipelinesNumberConfigParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdPipelinesNumberDeclineParams defines parameters for PostReposRepoIdPipelinesNumberDecline.
type PostReposRepoIdPipelinesNumberDeclineParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPipelinesNumberMetadataParams defines parameters for GetReposRepoIdPipelinesNumberMetadata.
type GetReposRepoIdPipelinesNumberMetadataParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdPullRequestsParams defines parameters for GetReposRepoIdPullRequests.
type GetReposRepoIdPullRequestsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdRegistriesParams defines parameters for GetReposRepoIdRegistries.
type GetReposRepoIdRegistriesParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdRegistriesParams defines parameters for PostReposRepoIdRegistries.
type PostReposRepoIdRegistriesParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdRegistriesRegistryParams defines parameters for DeleteReposRepoIdRegistriesRegistry.
type DeleteReposRepoIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdRegistriesRegistryParams defines parameters for GetReposRepoIdRegistriesRegistry.
type GetReposRepoIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchReposRepoIdRegistriesRegistryParams defines parameters for PatchReposRepoIdRegistriesRegistry.
type PatchReposRepoIdRegistriesRegistryParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdRepairParams defines parameters for PostReposRepoIdRepair.
type PostReposRepoIdRepairParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdSecretsParams defines parameters for GetReposRepoIdSecrets.
type GetReposRepoIdSecretsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostReposRepoIdSecretsParams defines parameters for PostReposRepoIdSecrets.
type PostReposRepoIdSecretsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteReposRepoIdSecretsSecretNameParams defines parameters for DeleteReposRepoIdSecretsSecretName.
type DeleteReposRepoIdSecretsSecretNameParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetReposRepoIdSecretsSecretNameParams defines parameters for GetReposRepoIdSecretsSecretName.
type GetReposRepoIdSecretsSecretNameParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchReposRepoIdSecretsSecretNameParams defines parameters for PatchReposRepoIdSecretsSecretName.
type PatchReposRepoIdSecretsSecretNameParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetSecretsParams defines parameters for GetSecrets.
type GetSecretsParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostSecretsParams defines parameters for PostSecrets.
type PostSecretsParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteSecretsSecretParams defines parameters for DeleteSecretsSecret.
type DeleteSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetSecretsSecretParams defines parameters for GetSecretsSecret.
type GetSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchSecretsSecretParams defines parameters for PatchSecretsSecret.
type PatchSecretsSecretParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetSignaturePublicKeyParams defines parameters for GetSignaturePublicKey.
type GetSignaturePublicKeyParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetUserFeedParams defines parameters for GetUserFeed.
type GetUserFeedParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetUserReposParams defines parameters for GetUserRepos.
type GetUserReposParams struct {
	// All query all repos, including inactive ones
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteUserTokenParams defines parameters for DeleteUserToken.
type DeleteUserTokenParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostUserTokenParams defines parameters for PostUserToken.
type PostUserTokenParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page for response pagination, page offset number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage for response pagination, max items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// DeleteUsersLoginParams defines parameters for DeleteUsersLogin.
type DeleteUsersLoginParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// GetUsersLoginParams defines parameters for GetUsersLogin.
type GetUsersLoginParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchUsersLoginParams defines parameters for PatchUsersLogin.
type PatchUsersLoginParams struct {
	// Authorization Insert your personal access token
	Authorization string `json:"Authorization"`
}

// PatchUsersLoginJSONRequestBody defines body for PatchUsersLogin for application/json ContentType.
type PatchUsersLoginJSONRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAgents request
	GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAgentsWithBody request with any body
	PostAgentsWithBody(ctx context.Context, params *PostAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentsAgentId request
	DeleteAgentsAgentId(ctx context.Context, agentId int, params *DeleteAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsAgentId request
	GetAgentsAgentId(ctx context.Context, agentId int, params *GetAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAgentsAgentIdWithBody request with any body
	PatchAgentsAgentIdWithBody(ctx context.Context, agentId int, params *PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsAgentIdTasks request
	GetAgentsAgentIdTasks(ctx context.Context, agentId int, params *GetAgentsAgentIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBadgesRepoIdCcXml request
	GetBadgesRepoIdCcXml(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBadgesRepoIdStatusSvg request
	GetBadgesRepoIdStatusSvg(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprof request
	GetDebugPprof(ctx context.Context, params *GetDebugPprofParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofBlock request
	GetDebugPprofBlock(ctx context.Context, params *GetDebugPprofBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofCmdline request
	GetDebugPprofCmdline(ctx context.Context, params *GetDebugPprofCmdlineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofGoroutine request
	GetDebugPprofGoroutine(ctx context.Context, params *GetDebugPprofGoroutineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofHeap request
	GetDebugPprofHeap(ctx context.Context, params *GetDebugPprofHeapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofProfile request
	GetDebugPprofProfile(ctx context.Context, params *GetDebugPprofProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofSymbol request
	GetDebugPprofSymbol(ctx context.Context, params *GetDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDebugPprofSymbol request
	PostDebugPprofSymbol(ctx context.Context, params *PostDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofThreadcreate request
	GetDebugPprofThreadcreate(ctx context.Context, params *GetDebugPprofThreadcreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugPprofTrace request
	GetDebugPprofTrace(ctx context.Context, params *GetDebugPprofTraceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetForges request
	GetForges(ctx context.Context, params *GetForgesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostForgesWithBody request with any body
	PostForgesWithBody(ctx context.Context, params *PostForgesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteForgesForgeId request
	DeleteForgesForgeId(ctx context.Context, forgeId int, params *DeleteForgesForgeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetForgesForgeId request
	GetForgesForgeId(ctx context.Context, forgeId int, params *GetForgesForgeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchForgesForgeIdWithBody request with any body
	PatchForgesForgeIdWithBody(ctx context.Context, forgeId int, params *PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealthz request
	GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHookWithBody request with any body
	PostHookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogLevel request
	GetLogLevel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogLevelWithBody request with any body
	PostLogLevelWithBody(ctx context.Context, params *PostLogLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgLookupOrgFullName request
	GetOrgLookupOrgFullName(ctx context.Context, orgFullName string, params *GetOrgLookupOrgFullNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgs request
	GetOrgs(ctx context.Context, params *GetOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsId request
	DeleteOrgsId(ctx context.Context, id string, params *DeleteOrgsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgId request
	GetOrgsOrgId(ctx context.Context, orgId string, params *GetOrgsOrgIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAgents request
	GetOrgsOrgIdAgents(ctx context.Context, orgId int, params *GetOrgsOrgIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAgentsWithBody request with any body
	PostOrgsOrgIdAgentsWithBody(ctx context.Context, orgId int, params *PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAgentsAgentId request
	DeleteOrgsOrgIdAgentsAgentId(ctx context.Context, orgId int, agentId int, params *DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAgentsAgentIdWithBody request with any body
	PatchOrgsOrgIdAgentsAgentIdWithBody(ctx context.Context, orgId int, agentId int, params *PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdPermissions request
	GetOrgsOrgIdPermissions(ctx context.Context, orgId string, params *GetOrgsOrgIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistries(ctx context.Context, orgId string, params *GetOrgsOrgIdRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdRegistriesWithBody request with any body
	PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdRegistriesRegistry request
	DeleteOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegistry request
	GetOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdRegistriesRegistryWithBody request with any body
	PatchOrgsOrgIdRegistriesRegistryWithBody(ctx context.Context, orgId string, registry string, params *PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecrets request
	GetOrgsOrgIdSecrets(ctx context.Context, orgId string, params *GetOrgsOrgIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdSecretsWithBody request with any body
	PostOrgsOrgIdSecretsWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdSecretsSecret request
	DeleteOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdSecretsSecret request
	GetOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *GetOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdSecretsSecretWithBody request with any body
	PatchOrgsOrgIdSecretsSecretWithBody(ctx context.Context, orgId string, secret string, params *PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelines request
	GetPipelines(ctx context.Context, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueueInfo request
	GetQueueInfo(ctx context.Context, params *GetQueueInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueueNorunningpipelines request
	GetQueueNorunningpipelines(ctx context.Context, params *GetQueueNorunningpipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueuePause request
	PostQueuePause(ctx context.Context, params *PostQueuePauseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueueResume request
	PostQueueResume(ctx context.Context, params *PostQueueResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistries request
	GetRegistries(ctx context.Context, params *GetRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegistriesWithBody request with any body
	PostRegistriesWithBody(ctx context.Context, params *PostRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegistriesRegistry request
	DeleteRegistriesRegistry(ctx context.Context, registry string, params *DeleteRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistriesRegistry request
	GetRegistriesRegistry(ctx context.Context, registry string, params *GetRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRegistriesRegistryWithBody request with any body
	PatchRegistriesRegistryWithBody(ctx context.Context, registry string, params *PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepos request
	GetRepos(ctx context.Context, params *GetReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepos request
	PostRepos(ctx context.Context, params *PostReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposLookupRepoFullName request
	GetReposLookupRepoFullName(ctx context.Context, repoFullName string, params *GetReposLookupRepoFullNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepair request
	PostReposRepair(ctx context.Context, params *PostReposRepairParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoId request
	DeleteReposRepoId(ctx context.Context, repoId int, params *DeleteReposRepoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoId request
	GetReposRepoId(ctx context.Context, repoId int, params *GetReposRepoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReposRepoIdWithBody request with any body
	PatchReposRepoIdWithBody(ctx context.Context, repoId int, params *PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdBranches request
	GetReposRepoIdBranches(ctx context.Context, repoId int, params *GetReposRepoIdBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdChown request
	PostReposRepoIdChown(ctx context.Context, repoId int, params *PostReposRepoIdChownParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdCron request
	GetReposRepoIdCron(ctx context.Context, repoId int, params *GetReposRepoIdCronParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdCronWithBody request with any body
	PostReposRepoIdCronWithBody(ctx context.Context, repoId int, params *PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdCronCron request
	DeleteReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *DeleteReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdCronCron request
	GetReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *GetReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReposRepoIdCronCronWithBody request with any body
	PatchReposRepoIdCronCronWithBody(ctx context.Context, repoId int, cron string, params *PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdCronCron request
	PostReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *PostReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdLogsNumber request
	DeleteReposRepoIdLogsNumber(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdLogsNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdLogsNumberStepID request
	GetReposRepoIdLogsNumberStepID(ctx context.Context, repoId int, number int, stepID int, params *GetReposRepoIdLogsNumberStepIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdLogsNumberStepId request
	DeleteReposRepoIdLogsNumberStepId(ctx context.Context, repoId int, number int, stepId int, params *DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdMove request
	PostReposRepoIdMove(ctx context.Context, repoId int, params *PostReposRepoIdMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPermissions request
	GetReposRepoIdPermissions(ctx context.Context, repoId int, params *GetReposRepoIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPipelines request
	GetReposRepoIdPipelines(ctx context.Context, repoId int, params *GetReposRepoIdPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdPipelinesWithBody request with any body
	PostReposRepoIdPipelinesWithBody(ctx context.Context, repoId int, params *PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdPipelinesNumber request
	DeleteReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPipelinesNumber request
	GetReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdPipelinesNumber request
	PostReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdPipelinesNumberApprove request
	PostReposRepoIdPipelinesNumberApprove(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdPipelinesNumberCancel request
	PostReposRepoIdPipelinesNumberCancel(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPipelinesNumberConfig request
	GetReposRepoIdPipelinesNumberConfig(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdPipelinesNumberDecline request
	PostReposRepoIdPipelinesNumberDecline(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPipelinesNumberMetadata request
	GetReposRepoIdPipelinesNumberMetadata(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdPullRequests request
	GetReposRepoIdPullRequests(ctx context.Context, repoId int, params *GetReposRepoIdPullRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdRegistries request
	GetReposRepoIdRegistries(ctx context.Context, repoId int, params *GetReposRepoIdRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdRegistriesWithBody request with any body
	PostReposRepoIdRegistriesWithBody(ctx context.Context, repoId int, params *PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdRegistriesRegistry request
	DeleteReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdRegistriesRegistry request
	GetReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *GetReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReposRepoIdRegistriesRegistryWithBody request with any body
	PatchReposRepoIdRegistriesRegistryWithBody(ctx context.Context, repoId int, registry string, params *PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdRepair request
	PostReposRepoIdRepair(ctx context.Context, repoId int, params *PostReposRepoIdRepairParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdSecrets request
	GetReposRepoIdSecrets(ctx context.Context, repoId int, params *GetReposRepoIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReposRepoIdSecretsWithBody request with any body
	PostReposRepoIdSecretsWithBody(ctx context.Context, repoId int, params *PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReposRepoIdSecretsSecretName request
	DeleteReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReposRepoIdSecretsSecretName request
	GetReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *GetReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReposRepoIdSecretsSecretNameWithBody request with any body
	PatchReposRepoIdSecretsSecretNameWithBody(ctx context.Context, repoId int, secretName string, params *PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecrets request
	GetSecrets(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretsWithBody request with any body
	PostSecretsWithBody(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretsSecret request
	DeleteSecretsSecret(ctx context.Context, secret string, params *DeleteSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretsSecret request
	GetSecretsSecret(ctx context.Context, secret string, params *GetSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSecretsSecretWithBody request with any body
	PatchSecretsSecretWithBody(ctx context.Context, secret string, params *PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSignaturePublicKey request
	GetSignaturePublicKey(ctx context.Context, params *GetSignaturePublicKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamEvents request
	GetStreamEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreamLogsRepoIdPipelineStepID request
	GetStreamLogsRepoIdPipelineStepID(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFeed request
	GetUserFeed(ctx context.Context, params *GetUserFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRepos request
	GetUserRepos(ctx context.Context, params *GetUserReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserToken request
	DeleteUserToken(ctx context.Context, params *DeleteUserTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserToken request
	PostUserToken(ctx context.Context, params *PostUserTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersLogin request
	DeleteUsersLogin(ctx context.Context, login string, params *DeleteUsersLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersLogin request
	GetUsersLogin(ctx context.Context, login string, params *GetUsersLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersLoginWithBody request with any body
	PatchUsersLoginWithBody(ctx context.Context, login string, params *PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersLogin(ctx context.Context, login string, params *PatchUsersLoginParams, body PatchUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAgentsWithBody(ctx context.Context, params *PostAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAgentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentsAgentId(ctx context.Context, agentId int, params *DeleteAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentsAgentIdRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsAgentId(ctx context.Context, agentId int, params *GetAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsAgentIdRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAgentsAgentIdWithBody(ctx context.Context, agentId int, params *PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAgentsAgentIdRequestWithBody(c.Server, agentId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsAgentIdTasks(ctx context.Context, agentId int, params *GetAgentsAgentIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsAgentIdTasksRequest(c.Server, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBadgesRepoIdCcXml(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBadgesRepoIdCcXmlRequest(c.Server, repoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBadgesRepoIdStatusSvg(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBadgesRepoIdStatusSvgRequest(c.Server, repoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprof(ctx context.Context, params *GetDebugPprofParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofBlock(ctx context.Context, params *GetDebugPprofBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofBlockRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofCmdline(ctx context.Context, params *GetDebugPprofCmdlineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofCmdlineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofGoroutine(ctx context.Context, params *GetDebugPprofGoroutineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofGoroutineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofHeap(ctx context.Context, params *GetDebugPprofHeapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofHeapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofProfile(ctx context.Context, params *GetDebugPprofProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofSymbol(ctx context.Context, params *GetDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofSymbolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDebugPprofSymbol(ctx context.Context, params *PostDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDebugPprofSymbolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofThreadcreate(ctx context.Context, params *GetDebugPprofThreadcreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofThreadcreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugPprofTrace(ctx context.Context, params *GetDebugPprofTraceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugPprofTraceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetForges(ctx context.Context, params *GetForgesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetForgesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostForgesWithBody(ctx context.Context, params *PostForgesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostForgesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteForgesForgeId(ctx context.Context, forgeId int, params *DeleteForgesForgeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteForgesForgeIdRequest(c.Server, forgeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetForgesForgeId(ctx context.Context, forgeId int, params *GetForgesForgeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetForgesForgeIdRequest(c.Server, forgeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchForgesForgeIdWithBody(ctx context.Context, forgeId int, params *PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchForgesForgeIdRequestWithBody(c.Server, forgeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogLevel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogLevelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogLevelWithBody(ctx context.Context, params *PostLogLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogLevelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgLookupOrgFullName(ctx context.Context, orgFullName string, params *GetOrgLookupOrgFullNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgLookupOrgFullNameRequest(c.Server, orgFullName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgs(ctx context.Context, params *GetOrgsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsId(ctx context.Context, id string, params *DeleteOrgsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgId(ctx context.Context, orgId string, params *GetOrgsOrgIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAgents(ctx context.Context, orgId int, params *GetOrgsOrgIdAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAgentsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAgentsWithBody(ctx context.Context, orgId int, params *PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAgentsRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAgentsAgentId(ctx context.Context, orgId int, agentId int, params *DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAgentsAgentIdRequest(c.Server, orgId, agentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAgentsAgentIdWithBody(ctx context.Context, orgId int, agentId int, params *PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAgentsAgentIdRequestWithBody(c.Server, orgId, agentId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdPermissions(ctx context.Context, orgId string, params *GetOrgsOrgIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdPermissionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistries(ctx context.Context, orgId string, params *GetOrgsOrgIdRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdRegistriesRegistryRequest(c.Server, orgId, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegistryRequest(c.Server, orgId, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegistryWithBody(ctx context.Context, orgId string, registry string, params *PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegistryRequestWithBody(c.Server, orgId, registry, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecrets(ctx context.Context, orgId string, params *GetOrgsOrgIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdSecretsWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdSecretsRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdSecretsSecretRequest(c.Server, orgId, secret, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *GetOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdSecretsSecretRequest(c.Server, orgId, secret, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdSecretsSecretWithBody(ctx context.Context, orgId string, secret string, params *PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdSecretsSecretRequestWithBody(c.Server, orgId, secret, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelines(ctx context.Context, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueueInfo(ctx context.Context, params *GetQueueInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueueInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueueNorunningpipelines(ctx context.Context, params *GetQueueNorunningpipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueueNorunningpipelinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueuePause(ctx context.Context, params *PostQueuePauseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueuePauseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueueResume(ctx context.Context, params *PostQueueResumeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueueResumeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistries(ctx context.Context, params *GetRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegistriesWithBody(ctx context.Context, params *PostRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegistriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegistriesRegistry(ctx context.Context, registry string, params *DeleteRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegistriesRegistryRequest(c.Server, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistriesRegistry(ctx context.Context, registry string, params *GetRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistriesRegistryRequest(c.Server, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRegistriesRegistryWithBody(ctx context.Context, registry string, params *PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRegistriesRegistryRequestWithBody(c.Server, registry, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepos(ctx context.Context, params *GetReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepos(ctx context.Context, params *PostReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposLookupRepoFullName(ctx context.Context, repoFullName string, params *GetReposLookupRepoFullNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposLookupRepoFullNameRequest(c.Server, repoFullName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepair(ctx context.Context, params *PostReposRepairParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepairRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoId(ctx context.Context, repoId int, params *DeleteReposRepoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoId(ctx context.Context, repoId int, params *GetReposRepoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReposRepoIdWithBody(ctx context.Context, repoId int, params *PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReposRepoIdRequestWithBody(c.Server, repoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdBranches(ctx context.Context, repoId int, params *GetReposRepoIdBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdBranchesRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdChown(ctx context.Context, repoId int, params *PostReposRepoIdChownParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdChownRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdCron(ctx context.Context, repoId int, params *GetReposRepoIdCronParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdCronRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdCronWithBody(ctx context.Context, repoId int, params *PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdCronRequestWithBody(c.Server, repoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *DeleteReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdCronCronRequest(c.Server, repoId, cron, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *GetReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdCronCronRequest(c.Server, repoId, cron, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReposRepoIdCronCronWithBody(ctx context.Context, repoId int, cron string, params *PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReposRepoIdCronCronRequestWithBody(c.Server, repoId, cron, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *PostReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdCronCronRequest(c.Server, repoId, cron, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdLogsNumber(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdLogsNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdLogsNumberRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdLogsNumberStepID(ctx context.Context, repoId int, number int, stepID int, params *GetReposRepoIdLogsNumberStepIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdLogsNumberStepIDRequest(c.Server, repoId, number, stepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdLogsNumberStepId(ctx context.Context, repoId int, number int, stepId int, params *DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdLogsNumberStepIdRequest(c.Server, repoId, number, stepId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdMove(ctx context.Context, repoId int, params *PostReposRepoIdMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdMoveRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPermissions(ctx context.Context, repoId int, params *GetReposRepoIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPermissionsRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPipelines(ctx context.Context, repoId int, params *GetReposRepoIdPipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPipelinesRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdPipelinesWithBody(ctx context.Context, repoId int, params *PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdPipelinesRequestWithBody(c.Server, repoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdPipelinesNumberRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPipelinesNumberRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdPipelinesNumberRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdPipelinesNumberApprove(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdPipelinesNumberApproveRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdPipelinesNumberCancel(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdPipelinesNumberCancelRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPipelinesNumberConfig(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPipelinesNumberConfigRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdPipelinesNumberDecline(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdPipelinesNumberDeclineRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPipelinesNumberMetadata(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPipelinesNumberMetadataRequest(c.Server, repoId, number, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdPullRequests(ctx context.Context, repoId int, params *GetReposRepoIdPullRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdPullRequestsRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdRegistries(ctx context.Context, repoId int, params *GetReposRepoIdRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdRegistriesRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdRegistriesWithBody(ctx context.Context, repoId int, params *PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdRegistriesRequestWithBody(c.Server, repoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdRegistriesRegistryRequest(c.Server, repoId, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *GetReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdRegistriesRegistryRequest(c.Server, repoId, registry, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReposRepoIdRegistriesRegistryWithBody(ctx context.Context, repoId int, registry string, params *PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReposRepoIdRegistriesRegistryRequestWithBody(c.Server, repoId, registry, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdRepair(ctx context.Context, repoId int, params *PostReposRepoIdRepairParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdRepairRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdSecrets(ctx context.Context, repoId int, params *GetReposRepoIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdSecretsRequest(c.Server, repoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReposRepoIdSecretsWithBody(ctx context.Context, repoId int, params *PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReposRepoIdSecretsRequestWithBody(c.Server, repoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReposRepoIdSecretsSecretNameRequest(c.Server, repoId, secretName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *GetReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReposRepoIdSecretsSecretNameRequest(c.Server, repoId, secretName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReposRepoIdSecretsSecretNameWithBody(ctx context.Context, repoId int, secretName string, params *PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReposRepoIdSecretsSecretNameRequestWithBody(c.Server, repoId, secretName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecrets(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretsWithBody(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretsSecret(ctx context.Context, secret string, params *DeleteSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretsSecretRequest(c.Server, secret, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretsSecret(ctx context.Context, secret string, params *GetSecretsSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretsSecretRequest(c.Server, secret, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretsSecretWithBody(ctx context.Context, secret string, params *PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretsSecretRequestWithBody(c.Server, secret, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSignaturePublicKey(ctx context.Context, params *GetSignaturePublicKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSignaturePublicKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreamEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreamLogsRepoIdPipelineStepID(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamLogsRepoIdPipelineStepIDRequest(c.Server, repoId, pipeline, stepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFeed(ctx context.Context, params *GetUserFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFeedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRepos(ctx context.Context, params *GetUserReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserToken(ctx context.Context, params *DeleteUserTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserToken(ctx context.Context, params *PostUserTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersLogin(ctx context.Context, login string, params *DeleteUsersLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersLoginRequest(c.Server, login, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersLogin(ctx context.Context, login string, params *GetUsersLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersLoginRequest(c.Server, login, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersLoginWithBody(ctx context.Context, login string, params *PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersLoginRequestWithBody(c.Server, login, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersLogin(ctx context.Context, login string, params *PatchUsersLoginParams, body PatchUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersLoginRequest(c.Server, login, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAgentsRequest generates requests for GetAgents
func NewGetAgentsRequest(server string, params *GetAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostAgentsRequestWithBody generates requests for PostAgents with any type of body
func NewPostAgentsRequestWithBody(server string, params *PostAgentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteAgentsAgentIdRequest generates requests for DeleteAgentsAgentId
func NewDeleteAgentsAgentIdRequest(server string, agentId int, params *DeleteAgentsAgentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetAgentsAgentIdRequest generates requests for GetAgentsAgentId
func NewGetAgentsAgentIdRequest(server string, agentId int, params *GetAgentsAgentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchAgentsAgentIdRequestWithBody generates requests for PatchAgentsAgentId with any type of body
func NewPatchAgentsAgentIdRequestWithBody(server string, agentId int, params *PatchAgentsAgentIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetAgentsAgentIdTasksRequest generates requests for GetAgentsAgentIdTasks
func NewGetAgentsAgentIdTasksRequest(server string, agentId int, params *GetAgentsAgentIdTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetBadgesRepoIdCcXmlRequest generates requests for GetBadgesRepoIdCcXml
func NewGetBadgesRepoIdCcXmlRequest(server string, repoId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/badges/%s/cc.xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBadgesRepoIdStatusSvgRequest generates requests for GetBadgesRepoIdStatusSvg
func NewGetBadgesRepoIdStatusSvgRequest(server string, repoId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/badges/%s/status.svg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDebugPprofRequest generates requests for GetDebugPprof
func NewGetDebugPprofRequest(server string, params *GetDebugPprofParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofBlockRequest generates requests for GetDebugPprofBlock
func NewGetDebugPprofBlockRequest(server string, params *GetDebugPprofBlockParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/block")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofCmdlineRequest generates requests for GetDebugPprofCmdline
func NewGetDebugPprofCmdlineRequest(server string, params *GetDebugPprofCmdlineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/cmdline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofGoroutineRequest generates requests for GetDebugPprofGoroutine
func NewGetDebugPprofGoroutineRequest(server string, params *GetDebugPprofGoroutineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/goroutine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Debug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "debug", runtime.ParamLocationQuery, *params.Debug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofHeapRequest generates requests for GetDebugPprofHeap
func NewGetDebugPprofHeapRequest(server string, params *GetDebugPprofHeapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/heap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Gc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gc", runtime.ParamLocationQuery, *params.Gc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofProfileRequest generates requests for GetDebugPprofProfile
func NewGetDebugPprofProfileRequest(server string, params *GetDebugPprofProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seconds", runtime.ParamLocationQuery, params.Seconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofSymbolRequest generates requests for GetDebugPprofSymbol
func NewGetDebugPprofSymbolRequest(server string, params *GetDebugPprofSymbolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostDebugPprofSymbolRequest generates requests for PostDebugPprofSymbol
func NewPostDebugPprofSymbolRequest(server string, params *PostDebugPprofSymbolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofThreadcreateRequest generates requests for GetDebugPprofThreadcreate
func NewGetDebugPprofThreadcreateRequest(server string, params *GetDebugPprofThreadcreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/threadcreate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDebugPprofTraceRequest generates requests for GetDebugPprofTrace
func NewGetDebugPprofTraceRequest(server string, params *GetDebugPprofTraceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debug/pprof/trace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seconds", runtime.ParamLocationQuery, params.Seconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetForgesRequest generates requests for GetForges
func NewGetForgesRequest(server string, params *GetForgesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewPostForgesRequestWithBody generates requests for PostForges with any type of body
func NewPostForgesRequestWithBody(server string, params *PostForgesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteForgesForgeIdRequest generates requests for DeleteForgesForgeId
func NewDeleteForgesForgeIdRequest(server string, forgeId int, params *DeleteForgesForgeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "forgeId", runtime.ParamLocationPath, forgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetForgesForgeIdRequest generates requests for GetForgesForgeId
func NewGetForgesForgeIdRequest(server string, forgeId int, params *GetForgesForgeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "forgeId", runtime.ParamLocationPath, forgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewPatchForgesForgeIdRequestWithBody generates requests for PatchForgesForgeId with any type of body
func NewPatchForgesForgeIdRequestWithBody(server string, forgeId int, params *PatchForgesForgeIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "forgeId", runtime.ParamLocationPath, forgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetHealthzRequest generates requests for GetHealthz
func NewGetHealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHookRequestWithBody generates requests for PostHook with any type of body
func NewPostHookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogLevelRequest generates requests for GetLogLevel
func NewGetLogLevelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/log-level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLogLevelRequestWithBody generates requests for PostLogLevel with any type of body
func NewPostLogLevelRequestWithBody(server string, params *PostLogLevelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/log-level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgLookupOrgFullNameRequest generates requests for GetOrgLookupOrgFullName
func NewGetOrgLookupOrgFullNameRequest(server string, orgFullName string, params *GetOrgLookupOrgFullNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_full_name", runtime.ParamLocationPath, orgFullName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org/lookup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsRequest generates requests for GetOrgs
func NewGetOrgsRequest(server string, params *GetOrgsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteOrgsIdRequest generates requests for DeleteOrgsId
func NewDeleteOrgsIdRequest(server string, id string, params *DeleteOrgsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdRequest generates requests for GetOrgsOrgId
func NewGetOrgsOrgIdRequest(server string, orgId string, params *GetOrgsOrgIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdAgentsRequest generates requests for GetOrgsOrgIdAgents
func NewGetOrgsOrgIdAgentsRequest(server string, orgId int, params *GetOrgsOrgIdAgentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOrgsOrgIdAgentsRequestWithBody generates requests for PostOrgsOrgIdAgents with any type of body
func NewPostOrgsOrgIdAgentsRequestWithBody(server string, orgId int, params *PostOrgsOrgIdAgentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteOrgsOrgIdAgentsAgentIdRequest generates requests for DeleteOrgsOrgIdAgentsAgentId
func NewDeleteOrgsOrgIdAgentsAgentIdRequest(server string, orgId int, agentId int, params *DeleteOrgsOrgIdAgentsAgentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchOrgsOrgIdAgentsAgentIdRequestWithBody generates requests for PatchOrgsOrgIdAgentsAgentId with any type of body
func NewPatchOrgsOrgIdAgentsAgentIdRequestWithBody(server string, orgId int, agentId int, params *PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "agent_id", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/agents/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdPermissionsRequest generates requests for GetOrgsOrgIdPermissions
func NewGetOrgsOrgIdPermissionsRequest(server string, orgId string, params *GetOrgsOrgIdPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRequest generates requests for GetOrgsOrgIdRegistries
func NewGetOrgsOrgIdRegistriesRequest(server string, orgId string, params *GetOrgsOrgIdRegistriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOrgsOrgIdRegistriesRequestWithBody generates requests for PostOrgsOrgIdRegistries with any type of body
func NewPostOrgsOrgIdRegistriesRequestWithBody(server string, orgId string, params *PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteOrgsOrgIdRegistriesRegistryRequest generates requests for DeleteOrgsOrgIdRegistriesRegistry
func NewDeleteOrgsOrgIdRegistriesRegistryRequest(server string, orgId string, registry string, params *DeleteOrgsOrgIdRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegistryRequest generates requests for GetOrgsOrgIdRegistriesRegistry
func NewGetOrgsOrgIdRegistriesRegistryRequest(server string, orgId string, registry string, params *GetOrgsOrgIdRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchOrgsOrgIdRegistriesRegistryRequestWithBody generates requests for PatchOrgsOrgIdRegistriesRegistry with any type of body
func NewPatchOrgsOrgIdRegistriesRegistryRequestWithBody(server string, orgId string, registry string, params *PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdSecretsRequest generates requests for GetOrgsOrgIdSecrets
func NewGetOrgsOrgIdSecretsRequest(server string, orgId string, params *GetOrgsOrgIdSecretsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOrgsOrgIdSecretsRequestWithBody generates requests for PostOrgsOrgIdSecrets with any type of body
func NewPostOrgsOrgIdSecretsRequestWithBody(server string, orgId string, params *PostOrgsOrgIdSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteOrgsOrgIdSecretsSecretRequest generates requests for DeleteOrgsOrgIdSecretsSecret
func NewDeleteOrgsOrgIdSecretsSecretRequest(server string, orgId string, secret string, params *DeleteOrgsOrgIdSecretsSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOrgsOrgIdSecretsSecretRequest generates requests for GetOrgsOrgIdSecretsSecret
func NewGetOrgsOrgIdSecretsSecretRequest(server string, orgId string, secret string, params *GetOrgsOrgIdSecretsSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchOrgsOrgIdSecretsSecretRequestWithBody generates requests for PatchOrgsOrgIdSecretsSecret with any type of body
func NewPatchOrgsOrgIdSecretsSecretRequestWithBody(server string, orgId string, secret string, params *PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetPipelinesRequest generates requests for GetPipelines
func NewGetPipelinesRequest(server string, params *GetPipelinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetQueueInfoRequest generates requests for GetQueueInfo
func NewGetQueueInfoRequest(server string, params *GetQueueInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetQueueNorunningpipelinesRequest generates requests for GetQueueNorunningpipelines
func NewGetQueueNorunningpipelinesRequest(server string, params *GetQueueNorunningpipelinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/norunningpipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostQueuePauseRequest generates requests for PostQueuePause
func NewPostQueuePauseRequest(server string, params *PostQueuePauseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/pause")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostQueueResumeRequest generates requests for PostQueueResume
func NewPostQueueResumeRequest(server string, params *PostQueueResumeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/resume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetRegistriesRequest generates requests for GetRegistries
func NewGetRegistriesRequest(server string, params *GetRegistriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostRegistriesRequestWithBody generates requests for PostRegistries with any type of body
func NewPostRegistriesRequestWithBody(server string, params *PostRegistriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteRegistriesRegistryRequest generates requests for DeleteRegistriesRegistry
func NewDeleteRegistriesRegistryRequest(server string, registry string, params *DeleteRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetRegistriesRegistryRequest generates requests for GetRegistriesRegistry
func NewGetRegistriesRegistryRequest(server string, registry string, params *GetRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchRegistriesRegistryRequestWithBody generates requests for PatchRegistriesRegistry with any type of body
func NewPatchRegistriesRegistryRequestWithBody(server string, registry string, params *PatchRegistriesRegistryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRequest generates requests for GetRepos
func NewGetReposRequest(server string, params *GetReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRequest generates requests for PostRepos
func NewPostReposRequest(server string, params *PostReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forge_remote_id", runtime.ParamLocationQuery, params.ForgeRemoteId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposLookupRepoFullNameRequest generates requests for GetReposLookupRepoFullName
func NewGetReposLookupRepoFullNameRequest(server string, repoFullName string, params *GetReposLookupRepoFullNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_full_name", runtime.ParamLocationPath, repoFullName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/lookup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepairRequest generates requests for PostReposRepair
func NewPostReposRepairRequest(server string, params *PostReposRepairParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/repair")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdRequest generates requests for DeleteReposRepoId
func NewDeleteReposRepoIdRequest(server string, repoId int, params *DeleteReposRepoIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdRequest generates requests for GetReposRepoId
func NewGetReposRepoIdRequest(server string, repoId int, params *GetReposRepoIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchReposRepoIdRequestWithBody generates requests for PatchReposRepoId with any type of body
func NewPatchReposRepoIdRequestWithBody(server string, repoId int, params *PatchReposRepoIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdBranchesRequest generates requests for GetReposRepoIdBranches
func NewGetReposRepoIdBranchesRequest(server string, repoId int, params *GetReposRepoIdBranchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdChownRequest generates requests for PostReposRepoIdChown
func NewPostReposRepoIdChownRequest(server string, repoId int, params *PostReposRepoIdChownParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/chown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdCronRequest generates requests for GetReposRepoIdCron
func NewGetReposRepoIdCronRequest(server string, repoId int, params *GetReposRepoIdCronParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdCronRequestWithBody generates requests for PostReposRepoIdCron with any type of body
func NewPostReposRepoIdCronRequestWithBody(server string, repoId int, params *PostReposRepoIdCronParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdCronCronRequest generates requests for DeleteReposRepoIdCronCron
func NewDeleteReposRepoIdCronCronRequest(server string, repoId int, cron string, params *DeleteReposRepoIdCronCronParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cron", runtime.ParamLocationPath, cron)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdCronCronRequest generates requests for GetReposRepoIdCronCron
func NewGetReposRepoIdCronCronRequest(server string, repoId int, cron string, params *GetReposRepoIdCronCronParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cron", runtime.ParamLocationPath, cron)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchReposRepoIdCronCronRequestWithBody generates requests for PatchReposRepoIdCronCron with any type of body
func NewPatchReposRepoIdCronCronRequestWithBody(server string, repoId int, cron string, params *PatchReposRepoIdCronCronParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cron", runtime.ParamLocationPath, cron)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdCronCronRequest generates requests for PostReposRepoIdCronCron
func NewPostReposRepoIdCronCronRequest(server string, repoId int, cron string, params *PostReposRepoIdCronCronParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cron", runtime.ParamLocationPath, cron)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/cron/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdLogsNumberRequest generates requests for DeleteReposRepoIdLogsNumber
func NewDeleteReposRepoIdLogsNumberRequest(server string, repoId int, number int, params *DeleteReposRepoIdLogsNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/logs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdLogsNumberStepIDRequest generates requests for GetReposRepoIdLogsNumberStepID
func NewGetReposRepoIdLogsNumberStepIDRequest(server string, repoId int, number int, stepID int, params *GetReposRepoIdLogsNumberStepIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepID", runtime.ParamLocationPath, stepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/logs/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdLogsNumberStepIdRequest generates requests for DeleteReposRepoIdLogsNumberStepId
func NewDeleteReposRepoIdLogsNumberStepIdRequest(server string, repoId int, number int, stepId int, params *DeleteReposRepoIdLogsNumberStepIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepId", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/logs/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdMoveRequest generates requests for PostReposRepoIdMove
func NewPostReposRepoIdMoveRequest(server string, repoId int, params *PostReposRepoIdMoveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPermissionsRequest generates requests for GetReposRepoIdPermissions
func NewGetReposRepoIdPermissionsRequest(server string, repoId int, params *GetReposRepoIdPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPipelinesRequest generates requests for GetReposRepoIdPipelines
func NewGetReposRepoIdPipelinesRequest(server string, repoId int, params *GetReposRepoIdPipelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdPipelinesRequestWithBody generates requests for PostReposRepoIdPipelines with any type of body
func NewPostReposRepoIdPipelinesRequestWithBody(server string, repoId int, params *PostReposRepoIdPipelinesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdPipelinesNumberRequest generates requests for DeleteReposRepoIdPipelinesNumber
func NewDeleteReposRepoIdPipelinesNumberRequest(server string, repoId int, number int, params *DeleteReposRepoIdPipelinesNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPipelinesNumberRequest generates requests for GetReposRepoIdPipelinesNumber
func NewGetReposRepoIdPipelinesNumberRequest(server string, repoId int, number int, params *GetReposRepoIdPipelinesNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdPipelinesNumberRequest generates requests for PostReposRepoIdPipelinesNumber
func NewPostReposRepoIdPipelinesNumberRequest(server string, repoId int, number int, params *PostReposRepoIdPipelinesNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Event != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event", runtime.ParamLocationQuery, *params.Event); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeployTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploy_to", runtime.ParamLocationQuery, *params.DeployTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdPipelinesNumberApproveRequest generates requests for PostReposRepoIdPipelinesNumberApprove
func NewPostReposRepoIdPipelinesNumberApproveRequest(server string, repoId int, number int, params *PostReposRepoIdPipelinesNumberApproveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdPipelinesNumberCancelRequest generates requests for PostReposRepoIdPipelinesNumberCancel
func NewPostReposRepoIdPipelinesNumberCancelRequest(server string, repoId int, number int, params *PostReposRepoIdPipelinesNumberCancelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPipelinesNumberConfigRequest generates requests for GetReposRepoIdPipelinesNumberConfig
func NewGetReposRepoIdPipelinesNumberConfigRequest(server string, repoId int, number int, params *GetReposRepoIdPipelinesNumberConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdPipelinesNumberDeclineRequest generates requests for PostReposRepoIdPipelinesNumberDecline
func NewPostReposRepoIdPipelinesNumberDeclineRequest(server string, repoId int, number int, params *PostReposRepoIdPipelinesNumberDeclineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s/decline", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPipelinesNumberMetadataRequest generates requests for GetReposRepoIdPipelinesNumberMetadata
func NewGetReposRepoIdPipelinesNumberMetadataRequest(server string, repoId int, number int, params *GetReposRepoIdPipelinesNumberMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pipelines/%s/metadata", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdPullRequestsRequest generates requests for GetReposRepoIdPullRequests
func NewGetReposRepoIdPullRequestsRequest(server string, repoId int, params *GetReposRepoIdPullRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/pull_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdRegistriesRequest generates requests for GetReposRepoIdRegistries
func NewGetReposRepoIdRegistriesRequest(server string, repoId int, params *GetReposRepoIdRegistriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdRegistriesRequestWithBody generates requests for PostReposRepoIdRegistries with any type of body
func NewPostReposRepoIdRegistriesRequestWithBody(server string, repoId int, params *PostReposRepoIdRegistriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdRegistriesRegistryRequest generates requests for DeleteReposRepoIdRegistriesRegistry
func NewDeleteReposRepoIdRegistriesRegistryRequest(server string, repoId int, registry string, params *DeleteReposRepoIdRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdRegistriesRegistryRequest generates requests for GetReposRepoIdRegistriesRegistry
func NewGetReposRepoIdRegistriesRegistryRequest(server string, repoId int, registry string, params *GetReposRepoIdRegistriesRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchReposRepoIdRegistriesRegistryRequestWithBody generates requests for PatchReposRepoIdRegistriesRegistry with any type of body
func NewPatchReposRepoIdRegistriesRegistryRequestWithBody(server string, repoId int, registry string, params *PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "registry", runtime.ParamLocationPath, registry)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdRepairRequest generates requests for PostReposRepoIdRepair
func NewPostReposRepoIdRepairRequest(server string, repoId int, params *PostReposRepoIdRepairParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/repair", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdSecretsRequest generates requests for GetReposRepoIdSecrets
func NewGetReposRepoIdSecretsRequest(server string, repoId int, params *GetReposRepoIdSecretsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostReposRepoIdSecretsRequestWithBody generates requests for PostReposRepoIdSecrets with any type of body
func NewPostReposRepoIdSecretsRequestWithBody(server string, repoId int, params *PostReposRepoIdSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteReposRepoIdSecretsSecretNameRequest generates requests for DeleteReposRepoIdSecretsSecretName
func NewDeleteReposRepoIdSecretsSecretNameRequest(server string, repoId int, secretName string, params *DeleteReposRepoIdSecretsSecretNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secretName", runtime.ParamLocationPath, secretName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetReposRepoIdSecretsSecretNameRequest generates requests for GetReposRepoIdSecretsSecretName
func NewGetReposRepoIdSecretsSecretNameRequest(server string, repoId int, secretName string, params *GetReposRepoIdSecretsSecretNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secretName", runtime.ParamLocationPath, secretName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchReposRepoIdSecretsSecretNameRequestWithBody generates requests for PatchReposRepoIdSecretsSecretName with any type of body
func NewPatchReposRepoIdSecretsSecretNameRequestWithBody(server string, repoId int, secretName string, params *PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secretName", runtime.ParamLocationPath, secretName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetSecretsRequest generates requests for GetSecrets
func NewGetSecretsRequest(server string, params *GetSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostSecretsRequestWithBody generates requests for PostSecrets with any type of body
func NewPostSecretsRequestWithBody(server string, params *PostSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteSecretsSecretRequest generates requests for DeleteSecretsSecret
func NewDeleteSecretsSecretRequest(server string, secret string, params *DeleteSecretsSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetSecretsSecretRequest generates requests for GetSecretsSecret
func NewGetSecretsSecretRequest(server string, secret string, params *GetSecretsSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchSecretsSecretRequestWithBody generates requests for PatchSecretsSecret with any type of body
func NewPatchSecretsSecretRequestWithBody(server string, secret string, params *PatchSecretsSecretParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetSignaturePublicKeyRequest generates requests for GetSignaturePublicKey
func NewGetSignaturePublicKeyRequest(server string, params *GetSignaturePublicKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signature/public-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetStreamEventsRequest generates requests for GetStreamEvents
func NewGetStreamEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stream/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStreamLogsRepoIdPipelineStepIDRequest generates requests for GetStreamLogsRepoIdPipelineStepID
func NewGetStreamLogsRepoIdPipelineStepIDRequest(server string, repoId int, pipeline int, stepID int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repo_id", runtime.ParamLocationPath, repoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline", runtime.ParamLocationPath, pipeline)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepID", runtime.ParamLocationPath, stepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stream/logs/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUserFeedRequest generates requests for GetUserFeed
func NewGetUserFeedRequest(server string, params *GetUserFeedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/feed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUserReposRequest generates requests for GetUserRepos
func NewGetUserReposRequest(server string, params *GetUserReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteUserTokenRequest generates requests for DeleteUserToken
func NewDeleteUserTokenRequest(server string, params *DeleteUserTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostUserTokenRequest generates requests for PostUserToken
func NewPostUserTokenRequest(server string, params *PostUserTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, params *PostUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteUsersLoginRequest generates requests for DeleteUsersLogin
func NewDeleteUsersLoginRequest(server string, login string, params *DeleteUsersLoginParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "login", runtime.ParamLocationPath, login)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetUsersLoginRequest generates requests for GetUsersLogin
func NewGetUsersLoginRequest(server string, login string, params *GetUsersLoginParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "login", runtime.ParamLocationPath, login)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPatchUsersLoginRequest calls the generic PatchUsersLogin builder with application/json body
func NewPatchUsersLoginRequest(server string, login string, params *PatchUsersLoginParams, body PatchUsersLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersLoginRequestWithBody(server, login, params, "application/json", bodyReader)
}

// NewPatchUsersLoginRequestWithBody generates requests for PatchUsersLogin with any type of body
func NewPatchUsersLoginRequestWithBody(server string, login string, params *PatchUsersLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "login", runtime.ParamLocationPath, login)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAgentsWithResponse request
	GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error)

	// PostAgentsWithBodyWithResponse request with any body
	PostAgentsWithBodyWithResponse(ctx context.Context, params *PostAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error)

	// DeleteAgentsAgentIdWithResponse request
	DeleteAgentsAgentIdWithResponse(ctx context.Context, agentId int, params *DeleteAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*DeleteAgentsAgentIdResponse, error)

	// GetAgentsAgentIdWithResponse request
	GetAgentsAgentIdWithResponse(ctx context.Context, agentId int, params *GetAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*GetAgentsAgentIdResponse, error)

	// PatchAgentsAgentIdWithBodyWithResponse request with any body
	PatchAgentsAgentIdWithBodyWithResponse(ctx context.Context, agentId int, params *PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAgentsAgentIdResponse, error)

	// GetAgentsAgentIdTasksWithResponse request
	GetAgentsAgentIdTasksWithResponse(ctx context.Context, agentId int, params *GetAgentsAgentIdTasksParams, reqEditors ...RequestEditorFn) (*GetAgentsAgentIdTasksResponse, error)

	// GetBadgesRepoIdCcXmlWithResponse request
	GetBadgesRepoIdCcXmlWithResponse(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*GetBadgesRepoIdCcXmlResponse, error)

	// GetBadgesRepoIdStatusSvgWithResponse request
	GetBadgesRepoIdStatusSvgWithResponse(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*GetBadgesRepoIdStatusSvgResponse, error)

	// GetDebugPprofWithResponse request
	GetDebugPprofWithResponse(ctx context.Context, params *GetDebugPprofParams, reqEditors ...RequestEditorFn) (*GetDebugPprofResponse, error)

	// GetDebugPprofBlockWithResponse request
	GetDebugPprofBlockWithResponse(ctx context.Context, params *GetDebugPprofBlockParams, reqEditors ...RequestEditorFn) (*GetDebugPprofBlockResponse, error)

	// GetDebugPprofCmdlineWithResponse request
	GetDebugPprofCmdlineWithResponse(ctx context.Context, params *GetDebugPprofCmdlineParams, reqEditors ...RequestEditorFn) (*GetDebugPprofCmdlineResponse, error)

	// GetDebugPprofGoroutineWithResponse request
	GetDebugPprofGoroutineWithResponse(ctx context.Context, params *GetDebugPprofGoroutineParams, reqEditors ...RequestEditorFn) (*GetDebugPprofGoroutineResponse, error)

	// GetDebugPprofHeapWithResponse request
	GetDebugPprofHeapWithResponse(ctx context.Context, params *GetDebugPprofHeapParams, reqEditors ...RequestEditorFn) (*GetDebugPprofHeapResponse, error)

	// GetDebugPprofProfileWithResponse request
	GetDebugPprofProfileWithResponse(ctx context.Context, params *GetDebugPprofProfileParams, reqEditors ...RequestEditorFn) (*GetDebugPprofProfileResponse, error)

	// GetDebugPprofSymbolWithResponse request
	GetDebugPprofSymbolWithResponse(ctx context.Context, params *GetDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*GetDebugPprofSymbolResponse, error)

	// PostDebugPprofSymbolWithResponse request
	PostDebugPprofSymbolWithResponse(ctx context.Context, params *PostDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*PostDebugPprofSymbolResponse, error)

	// GetDebugPprofThreadcreateWithResponse request
	GetDebugPprofThreadcreateWithResponse(ctx context.Context, params *GetDebugPprofThreadcreateParams, reqEditors ...RequestEditorFn) (*GetDebugPprofThreadcreateResponse, error)

	// GetDebugPprofTraceWithResponse request
	GetDebugPprofTraceWithResponse(ctx context.Context, params *GetDebugPprofTraceParams, reqEditors ...RequestEditorFn) (*GetDebugPprofTraceResponse, error)

	// GetForgesWithResponse request
	GetForgesWithResponse(ctx context.Context, params *GetForgesParams, reqEditors ...RequestEditorFn) (*GetForgesResponse, error)

	// PostForgesWithBodyWithResponse request with any body
	PostForgesWithBodyWithResponse(ctx context.Context, params *PostForgesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostForgesResponse, error)

	// DeleteForgesForgeIdWithResponse request
	DeleteForgesForgeIdWithResponse(ctx context.Context, forgeId int, params *DeleteForgesForgeIdParams, reqEditors ...RequestEditorFn) (*DeleteForgesForgeIdResponse, error)

	// GetForgesForgeIdWithResponse request
	GetForgesForgeIdWithResponse(ctx context.Context, forgeId int, params *GetForgesForgeIdParams, reqEditors ...RequestEditorFn) (*GetForgesForgeIdResponse, error)

	// PatchForgesForgeIdWithBodyWithResponse request with any body
	PatchForgesForgeIdWithBodyWithResponse(ctx context.Context, forgeId int, params *PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchForgesForgeIdResponse, error)

	// GetHealthzWithResponse request
	GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzResponse, error)

	// PostHookWithBodyWithResponse request with any body
	PostHookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHookResponse, error)

	// GetLogLevelWithResponse request
	GetLogLevelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogLevelResponse, error)

	// PostLogLevelWithBodyWithResponse request with any body
	PostLogLevelWithBodyWithResponse(ctx context.Context, params *PostLogLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLogLevelResponse, error)

	// GetOrgLookupOrgFullNameWithResponse request
	GetOrgLookupOrgFullNameWithResponse(ctx context.Context, orgFullName string, params *GetOrgLookupOrgFullNameParams, reqEditors ...RequestEditorFn) (*GetOrgLookupOrgFullNameResponse, error)

	// GetOrgsWithResponse request
	GetOrgsWithResponse(ctx context.Context, params *GetOrgsParams, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error)

	// DeleteOrgsIdWithResponse request
	DeleteOrgsIdWithResponse(ctx context.Context, id string, params *DeleteOrgsIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsIdResponse, error)

	// GetOrgsOrgIdWithResponse request
	GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error)

	// GetOrgsOrgIdAgentsWithResponse request
	GetOrgsOrgIdAgentsWithResponse(ctx context.Context, orgId int, params *GetOrgsOrgIdAgentsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAgentsResponse, error)

	// PostOrgsOrgIdAgentsWithBodyWithResponse request with any body
	PostOrgsOrgIdAgentsWithBodyWithResponse(ctx context.Context, orgId int, params *PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAgentsResponse, error)

	// DeleteOrgsOrgIdAgentsAgentIdWithResponse request
	DeleteOrgsOrgIdAgentsAgentIdWithResponse(ctx context.Context, orgId int, agentId int, params *DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAgentsAgentIdResponse, error)

	// PatchOrgsOrgIdAgentsAgentIdWithBodyWithResponse request with any body
	PatchOrgsOrgIdAgentsAgentIdWithBodyWithResponse(ctx context.Context, orgId int, agentId int, params *PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAgentsAgentIdResponse, error)

	// GetOrgsOrgIdPermissionsWithResponse request
	GetOrgsOrgIdPermissionsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdPermissionsResponse, error)

	// GetOrgsOrgIdRegistriesWithResponse request
	GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdRegistriesParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error)

	// PostOrgsOrgIdRegistriesWithBodyWithResponse request with any body
	PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	// DeleteOrgsOrgIdRegistriesRegistryWithResponse request
	DeleteOrgsOrgIdRegistriesRegistryWithResponse(ctx context.Context, orgId string, registry string, params *DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegistryResponse, error)

	// GetOrgsOrgIdRegistriesRegistryWithResponse request
	GetOrgsOrgIdRegistriesRegistryWithResponse(ctx context.Context, orgId string, registry string, params *GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegistryResponse, error)

	// PatchOrgsOrgIdRegistriesRegistryWithBodyWithResponse request with any body
	PatchOrgsOrgIdRegistriesRegistryWithBodyWithResponse(ctx context.Context, orgId string, registry string, params *PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegistryResponse, error)

	// GetOrgsOrgIdSecretsWithResponse request
	GetOrgsOrgIdSecretsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdSecretsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretsResponse, error)

	// PostOrgsOrgIdSecretsWithBodyWithResponse request with any body
	PostOrgsOrgIdSecretsWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretsResponse, error)

	// DeleteOrgsOrgIdSecretsSecretWithResponse request
	DeleteOrgsOrgIdSecretsSecretWithResponse(ctx context.Context, orgId string, secret string, params *DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretsSecretResponse, error)

	// GetOrgsOrgIdSecretsSecretWithResponse request
	GetOrgsOrgIdSecretsSecretWithResponse(ctx context.Context, orgId string, secret string, params *GetOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretsSecretResponse, error)

	// PatchOrgsOrgIdSecretsSecretWithBodyWithResponse request with any body
	PatchOrgsOrgIdSecretsSecretWithBodyWithResponse(ctx context.Context, orgId string, secret string, params *PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretsSecretResponse, error)

	// GetPipelinesWithResponse request
	GetPipelinesWithResponse(ctx context.Context, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*GetPipelinesResponse, error)

	// GetQueueInfoWithResponse request
	GetQueueInfoWithResponse(ctx context.Context, params *GetQueueInfoParams, reqEditors ...RequestEditorFn) (*GetQueueInfoResponse, error)

	// GetQueueNorunningpipelinesWithResponse request
	GetQueueNorunningpipelinesWithResponse(ctx context.Context, params *GetQueueNorunningpipelinesParams, reqEditors ...RequestEditorFn) (*GetQueueNorunningpipelinesResponse, error)

	// PostQueuePauseWithResponse request
	PostQueuePauseWithResponse(ctx context.Context, params *PostQueuePauseParams, reqEditors ...RequestEditorFn) (*PostQueuePauseResponse, error)

	// PostQueueResumeWithResponse request
	PostQueueResumeWithResponse(ctx context.Context, params *PostQueueResumeParams, reqEditors ...RequestEditorFn) (*PostQueueResumeResponse, error)

	// GetRegistriesWithResponse request
	GetRegistriesWithResponse(ctx context.Context, params *GetRegistriesParams, reqEditors ...RequestEditorFn) (*GetRegistriesResponse, error)

	// PostRegistriesWithBodyWithResponse request with any body
	PostRegistriesWithBodyWithResponse(ctx context.Context, params *PostRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegistriesResponse, error)

	// DeleteRegistriesRegistryWithResponse request
	DeleteRegistriesRegistryWithResponse(ctx context.Context, registry string, params *DeleteRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteRegistriesRegistryResponse, error)

	// GetRegistriesRegistryWithResponse request
	GetRegistriesRegistryWithResponse(ctx context.Context, registry string, params *GetRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetRegistriesRegistryResponse, error)

	// PatchRegistriesRegistryWithBodyWithResponse request with any body
	PatchRegistriesRegistryWithBodyWithResponse(ctx context.Context, registry string, params *PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRegistriesRegistryResponse, error)

	// GetReposWithResponse request
	GetReposWithResponse(ctx context.Context, params *GetReposParams, reqEditors ...RequestEditorFn) (*GetReposResponse, error)

	// PostReposWithResponse request
	PostReposWithResponse(ctx context.Context, params *PostReposParams, reqEditors ...RequestEditorFn) (*PostReposResponse, error)

	// GetReposLookupRepoFullNameWithResponse request
	GetReposLookupRepoFullNameWithResponse(ctx context.Context, repoFullName string, params *GetReposLookupRepoFullNameParams, reqEditors ...RequestEditorFn) (*GetReposLookupRepoFullNameResponse, error)

	// PostReposRepairWithResponse request
	PostReposRepairWithResponse(ctx context.Context, params *PostReposRepairParams, reqEditors ...RequestEditorFn) (*PostReposRepairResponse, error)

	// DeleteReposRepoIdWithResponse request
	DeleteReposRepoIdWithResponse(ctx context.Context, repoId int, params *DeleteReposRepoIdParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdResponse, error)

	// GetReposRepoIdWithResponse request
	GetReposRepoIdWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdResponse, error)

	// PatchReposRepoIdWithBodyWithResponse request with any body
	PatchReposRepoIdWithBodyWithResponse(ctx context.Context, repoId int, params *PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdResponse, error)

	// GetReposRepoIdBranchesWithResponse request
	GetReposRepoIdBranchesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdBranchesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdBranchesResponse, error)

	// PostReposRepoIdChownWithResponse request
	PostReposRepoIdChownWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdChownParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdChownResponse, error)

	// GetReposRepoIdCronWithResponse request
	GetReposRepoIdCronWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdCronParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdCronResponse, error)

	// PostReposRepoIdCronWithBodyWithResponse request with any body
	PostReposRepoIdCronWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdCronResponse, error)

	// DeleteReposRepoIdCronCronWithResponse request
	DeleteReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *DeleteReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdCronCronResponse, error)

	// GetReposRepoIdCronCronWithResponse request
	GetReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *GetReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdCronCronResponse, error)

	// PatchReposRepoIdCronCronWithBodyWithResponse request with any body
	PatchReposRepoIdCronCronWithBodyWithResponse(ctx context.Context, repoId int, cron string, params *PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdCronCronResponse, error)

	// PostReposRepoIdCronCronWithResponse request
	PostReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *PostReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdCronCronResponse, error)

	// DeleteReposRepoIdLogsNumberWithResponse request
	DeleteReposRepoIdLogsNumberWithResponse(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdLogsNumberParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdLogsNumberResponse, error)

	// GetReposRepoIdLogsNumberStepIDWithResponse request
	GetReposRepoIdLogsNumberStepIDWithResponse(ctx context.Context, repoId int, number int, stepID int, params *GetReposRepoIdLogsNumberStepIDParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdLogsNumberStepIDResponse, error)

	// DeleteReposRepoIdLogsNumberStepIdWithResponse request
	DeleteReposRepoIdLogsNumberStepIdWithResponse(ctx context.Context, repoId int, number int, stepId int, params *DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdLogsNumberStepIdResponse, error)

	// PostReposRepoIdMoveWithResponse request
	PostReposRepoIdMoveWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdMoveParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdMoveResponse, error)

	// GetReposRepoIdPermissionsWithResponse request
	GetReposRepoIdPermissionsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPermissionsResponse, error)

	// GetReposRepoIdPipelinesWithResponse request
	GetReposRepoIdPipelinesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPipelinesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesResponse, error)

	// PostReposRepoIdPipelinesWithBodyWithResponse request with any body
	PostReposRepoIdPipelinesWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesResponse, error)

	// DeleteReposRepoIdPipelinesNumberWithResponse request
	DeleteReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdPipelinesNumberResponse, error)

	// GetReposRepoIdPipelinesNumberWithResponse request
	GetReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberResponse, error)

	// PostReposRepoIdPipelinesNumberWithResponse request
	PostReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberResponse, error)

	// PostReposRepoIdPipelinesNumberApproveWithResponse request
	PostReposRepoIdPipelinesNumberApproveWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberApproveResponse, error)

	// PostReposRepoIdPipelinesNumberCancelWithResponse request
	PostReposRepoIdPipelinesNumberCancelWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberCancelResponse, error)

	// GetReposRepoIdPipelinesNumberConfigWithResponse request
	GetReposRepoIdPipelinesNumberConfigWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberConfigResponse, error)

	// PostReposRepoIdPipelinesNumberDeclineWithResponse request
	PostReposRepoIdPipelinesNumberDeclineWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberDeclineResponse, error)

	// GetReposRepoIdPipelinesNumberMetadataWithResponse request
	GetReposRepoIdPipelinesNumberMetadataWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberMetadataResponse, error)

	// GetReposRepoIdPullRequestsWithResponse request
	GetReposRepoIdPullRequestsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPullRequestsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPullRequestsResponse, error)

	// GetReposRepoIdRegistriesWithResponse request
	GetReposRepoIdRegistriesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdRegistriesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdRegistriesResponse, error)

	// PostReposRepoIdRegistriesWithBodyWithResponse request with any body
	PostReposRepoIdRegistriesWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdRegistriesResponse, error)

	// DeleteReposRepoIdRegistriesRegistryWithResponse request
	DeleteReposRepoIdRegistriesRegistryWithResponse(ctx context.Context, repoId int, registry string, params *DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdRegistriesRegistryResponse, error)

	// GetReposRepoIdRegistriesRegistryWithResponse request
	GetReposRepoIdRegistriesRegistryWithResponse(ctx context.Context, repoId int, registry string, params *GetReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdRegistriesRegistryResponse, error)

	// PatchReposRepoIdRegistriesRegistryWithBodyWithResponse request with any body
	PatchReposRepoIdRegistriesRegistryWithBodyWithResponse(ctx context.Context, repoId int, registry string, params *PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdRegistriesRegistryResponse, error)

	// PostReposRepoIdRepairWithResponse request
	PostReposRepoIdRepairWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdRepairParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdRepairResponse, error)

	// GetReposRepoIdSecretsWithResponse request
	GetReposRepoIdSecretsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdSecretsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdSecretsResponse, error)

	// PostReposRepoIdSecretsWithBodyWithResponse request with any body
	PostReposRepoIdSecretsWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdSecretsResponse, error)

	// DeleteReposRepoIdSecretsSecretNameWithResponse request
	DeleteReposRepoIdSecretsSecretNameWithResponse(ctx context.Context, repoId int, secretName string, params *DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdSecretsSecretNameResponse, error)

	// GetReposRepoIdSecretsSecretNameWithResponse request
	GetReposRepoIdSecretsSecretNameWithResponse(ctx context.Context, repoId int, secretName string, params *GetReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdSecretsSecretNameResponse, error)

	// PatchReposRepoIdSecretsSecretNameWithBodyWithResponse request with any body
	PatchReposRepoIdSecretsSecretNameWithBodyWithResponse(ctx context.Context, repoId int, secretName string, params *PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdSecretsSecretNameResponse, error)

	// GetSecretsWithResponse request
	GetSecretsWithResponse(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error)

	// PostSecretsWithBodyWithResponse request with any body
	PostSecretsWithBodyWithResponse(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error)

	// DeleteSecretsSecretWithResponse request
	DeleteSecretsSecretWithResponse(ctx context.Context, secret string, params *DeleteSecretsSecretParams, reqEditors ...RequestEditorFn) (*DeleteSecretsSecretResponse, error)

	// GetSecretsSecretWithResponse request
	GetSecretsSecretWithResponse(ctx context.Context, secret string, params *GetSecretsSecretParams, reqEditors ...RequestEditorFn) (*GetSecretsSecretResponse, error)

	// PatchSecretsSecretWithBodyWithResponse request with any body
	PatchSecretsSecretWithBodyWithResponse(ctx context.Context, secret string, params *PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretsSecretResponse, error)

	// GetSignaturePublicKeyWithResponse request
	GetSignaturePublicKeyWithResponse(ctx context.Context, params *GetSignaturePublicKeyParams, reqEditors ...RequestEditorFn) (*GetSignaturePublicKeyResponse, error)

	// GetStreamEventsWithResponse request
	GetStreamEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStreamEventsResponse, error)

	// GetStreamLogsRepoIdPipelineStepIDWithResponse request
	GetStreamLogsRepoIdPipelineStepIDWithResponse(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...RequestEditorFn) (*GetStreamLogsRepoIdPipelineStepIDResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserFeedWithResponse request
	GetUserFeedWithResponse(ctx context.Context, params *GetUserFeedParams, reqEditors ...RequestEditorFn) (*GetUserFeedResponse, error)

	// GetUserReposWithResponse request
	GetUserReposWithResponse(ctx context.Context, params *GetUserReposParams, reqEditors ...RequestEditorFn) (*GetUserReposResponse, error)

	// DeleteUserTokenWithResponse request
	DeleteUserTokenWithResponse(ctx context.Context, params *DeleteUserTokenParams, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error)

	// PostUserTokenWithResponse request
	PostUserTokenWithResponse(ctx context.Context, params *PostUserTokenParams, reqEditors ...RequestEditorFn) (*PostUserTokenResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// DeleteUsersLoginWithResponse request
	DeleteUsersLoginWithResponse(ctx context.Context, login string, params *DeleteUsersLoginParams, reqEditors ...RequestEditorFn) (*DeleteUsersLoginResponse, error)

	// GetUsersLoginWithResponse request
	GetUsersLoginWithResponse(ctx context.Context, login string, params *GetUsersLoginParams, reqEditors ...RequestEditorFn) (*GetUsersLoginResponse, error)

	// PatchUsersLoginWithBodyWithResponse request with any body
	PatchUsersLoginWithBodyWithResponse(ctx context.Context, login string, params *PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersLoginResponse, error)

	PatchUsersLoginWithResponse(ctx context.Context, login string, params *PatchUsersLoginParams, body PatchUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersLoginResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Agent
}

// Status returns HTTPResponse.Status
func (r GetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r PostAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentsAgentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAgentsAgentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentsAgentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsAgentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r GetAgentsAgentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsAgentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAgentsAgentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r PatchAgentsAgentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAgentsAgentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsAgentIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
}

// Status returns HTTPResponse.Status
func (r GetAgentsAgentIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsAgentIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBadgesRepoIdCcXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBadgesRepoIdCcXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBadgesRepoIdCcXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBadgesRepoIdStatusSvgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBadgesRepoIdStatusSvgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBadgesRepoIdStatusSvgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofCmdlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofCmdlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofCmdlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofGoroutineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofGoroutineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofGoroutineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofHeapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofHeapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofHeapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDebugPprofSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDebugPprofSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDebugPprofSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofThreadcreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofThreadcreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofThreadcreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugPprofTraceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDebugPprofTraceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugPprofTraceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetForgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Forge
}

// Status returns HTTPResponse.Status
func (r GetForgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetForgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostForgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Forge
}

// Status returns HTTPResponse.Status
func (r PostForgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostForgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteForgesForgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteForgesForgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteForgesForgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetForgesForgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Forge
}

// Status returns HTTPResponse.Status
func (r GetForgesForgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetForgesForgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchForgesForgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Forge
}

// Status returns HTTPResponse.Status
func (r PatchForgesForgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchForgesForgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LogLevel *string `json:"log-level,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLogLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLogLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LogLevel *string `json:"log-level,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLogLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLogLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgLookupOrgFullNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Org
}

// Status returns HTTPResponse.Status
func (r GetOrgLookupOrgFullNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgLookupOrgFullNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Org
}

// Status returns HTTPResponse.Status
func (r GetOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Org
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Agent
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAgentsAgentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAgentsAgentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAgentsAgentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAgentsAgentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Agent
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAgentsAgentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAgentsAgentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrgPerm
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Registry
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Secret
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Feed
}

// Status returns HTTPResponse.Status
func (r GetPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueueInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetQueueInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueueInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueueNorunningpipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetQueueNorunningpipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueueNorunningpipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueuePauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostQueuePauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueuePauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueueResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostQueueResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueueResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Registry
}

// Status returns HTTPResponse.Status
func (r GetRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PostRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r GetRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PatchRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
}

// Status returns HTTPResponse.Status
func (r GetReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r PostReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposLookupRepoFullNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r GetReposLookupRepoFullNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposLookupRepoFullNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReposRepairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReposRepoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r PatchReposRepoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReposRepoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdChownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repo
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdChownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdChownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cron
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cron
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdCronCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdCronCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdCronCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdCronCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cron
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdCronCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdCronCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReposRepoIdCronCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cron
}

// Status returns HTTPResponse.Status
func (r PatchReposRepoIdCronCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReposRepoIdCronCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdCronCronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdCronCronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdCronCronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdLogsNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdLogsNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdLogsNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdLogsNumberStepIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogEntry
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdLogsNumberStepIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdLogsNumberStepIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdLogsNumberStepIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdLogsNumberStepIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdLogsNumberStepIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Perm
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pipeline
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdPipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdPipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdPipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdPipelinesNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdPipelinesNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdPipelinesNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPipelinesNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPipelinesNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPipelinesNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdPipelinesNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdPipelinesNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdPipelinesNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdPipelinesNumberApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdPipelinesNumberApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdPipelinesNumberApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdPipelinesNumberCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdPipelinesNumberCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdPipelinesNumberCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPipelinesNumberConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Config
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPipelinesNumberConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPipelinesNumberConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdPipelinesNumberDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdPipelinesNumberDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdPipelinesNumberDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPipelinesNumberMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataMetadata
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPipelinesNumberMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPipelinesNumberMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdPullRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PullRequest
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdPullRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdPullRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Registry
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReposRepoIdRegistriesRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r PatchReposRepoIdRegistriesRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReposRepoIdRegistriesRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdRepairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdRepairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdRepairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Secret
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReposRepoIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PostReposRepoIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReposRepoIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReposRepoIdSecretsSecretNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReposRepoIdSecretsSecretNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReposRepoIdSecretsSecretNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReposRepoIdSecretsSecretNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r GetReposRepoIdSecretsSecretNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReposRepoIdSecretsSecretNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReposRepoIdSecretsSecretNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PatchReposRepoIdSecretsSecretNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReposRepoIdSecretsSecretNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Secret
}

// Status returns HTTPResponse.Status
func (r GetSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PostSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r GetSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSecretsSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PatchSecretsSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSecretsSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSignaturePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSignaturePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSignaturePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStreamEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamLogsRepoIdPipelineStepIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStreamLogsRepoIdPipelineStepIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamLogsRepoIdPipelineStepIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Feed
}

// Status returns HTTPResponse.Status
func (r GetUserFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
}

// Status returns HTTPResponse.Status
func (r GetUserReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUsersLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PatchUsersLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Source  *string `json:"source,omitempty"`
		Version *string `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAgentsWithResponse request returning *GetAgentsResponse
func (c *ClientWithResponses) GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error) {
	rsp, err := c.GetAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsResponse(rsp)
}

// PostAgentsWithBodyWithResponse request with arbitrary body returning *PostAgentsResponse
func (c *ClientWithResponses) PostAgentsWithBodyWithResponse(ctx context.Context, params *PostAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error) {
	rsp, err := c.PostAgentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAgentsResponse(rsp)
}

// DeleteAgentsAgentIdWithResponse request returning *DeleteAgentsAgentIdResponse
func (c *ClientWithResponses) DeleteAgentsAgentIdWithResponse(ctx context.Context, agentId int, params *DeleteAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*DeleteAgentsAgentIdResponse, error) {
	rsp, err := c.DeleteAgentsAgentId(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentsAgentIdResponse(rsp)
}

// GetAgentsAgentIdWithResponse request returning *GetAgentsAgentIdResponse
func (c *ClientWithResponses) GetAgentsAgentIdWithResponse(ctx context.Context, agentId int, params *GetAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*GetAgentsAgentIdResponse, error) {
	rsp, err := c.GetAgentsAgentId(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsAgentIdResponse(rsp)
}

// PatchAgentsAgentIdWithBodyWithResponse request with arbitrary body returning *PatchAgentsAgentIdResponse
func (c *ClientWithResponses) PatchAgentsAgentIdWithBodyWithResponse(ctx context.Context, agentId int, params *PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAgentsAgentIdResponse, error) {
	rsp, err := c.PatchAgentsAgentIdWithBody(ctx, agentId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAgentsAgentIdResponse(rsp)
}

// GetAgentsAgentIdTasksWithResponse request returning *GetAgentsAgentIdTasksResponse
func (c *ClientWithResponses) GetAgentsAgentIdTasksWithResponse(ctx context.Context, agentId int, params *GetAgentsAgentIdTasksParams, reqEditors ...RequestEditorFn) (*GetAgentsAgentIdTasksResponse, error) {
	rsp, err := c.GetAgentsAgentIdTasks(ctx, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsAgentIdTasksResponse(rsp)
}

// GetBadgesRepoIdCcXmlWithResponse request returning *GetBadgesRepoIdCcXmlResponse
func (c *ClientWithResponses) GetBadgesRepoIdCcXmlWithResponse(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*GetBadgesRepoIdCcXmlResponse, error) {
	rsp, err := c.GetBadgesRepoIdCcXml(ctx, repoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBadgesRepoIdCcXmlResponse(rsp)
}

// GetBadgesRepoIdStatusSvgWithResponse request returning *GetBadgesRepoIdStatusSvgResponse
func (c *ClientWithResponses) GetBadgesRepoIdStatusSvgWithResponse(ctx context.Context, repoId int, reqEditors ...RequestEditorFn) (*GetBadgesRepoIdStatusSvgResponse, error) {
	rsp, err := c.GetBadgesRepoIdStatusSvg(ctx, repoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBadgesRepoIdStatusSvgResponse(rsp)
}

// GetDebugPprofWithResponse request returning *GetDebugPprofResponse
func (c *ClientWithResponses) GetDebugPprofWithResponse(ctx context.Context, params *GetDebugPprofParams, reqEditors ...RequestEditorFn) (*GetDebugPprofResponse, error) {
	rsp, err := c.GetDebugPprof(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofResponse(rsp)
}

// GetDebugPprofBlockWithResponse request returning *GetDebugPprofBlockResponse
func (c *ClientWithResponses) GetDebugPprofBlockWithResponse(ctx context.Context, params *GetDebugPprofBlockParams, reqEditors ...RequestEditorFn) (*GetDebugPprofBlockResponse, error) {
	rsp, err := c.GetDebugPprofBlock(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofBlockResponse(rsp)
}

// GetDebugPprofCmdlineWithResponse request returning *GetDebugPprofCmdlineResponse
func (c *ClientWithResponses) GetDebugPprofCmdlineWithResponse(ctx context.Context, params *GetDebugPprofCmdlineParams, reqEditors ...RequestEditorFn) (*GetDebugPprofCmdlineResponse, error) {
	rsp, err := c.GetDebugPprofCmdline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofCmdlineResponse(rsp)
}

// GetDebugPprofGoroutineWithResponse request returning *GetDebugPprofGoroutineResponse
func (c *ClientWithResponses) GetDebugPprofGoroutineWithResponse(ctx context.Context, params *GetDebugPprofGoroutineParams, reqEditors ...RequestEditorFn) (*GetDebugPprofGoroutineResponse, error) {
	rsp, err := c.GetDebugPprofGoroutine(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofGoroutineResponse(rsp)
}

// GetDebugPprofHeapWithResponse request returning *GetDebugPprofHeapResponse
func (c *ClientWithResponses) GetDebugPprofHeapWithResponse(ctx context.Context, params *GetDebugPprofHeapParams, reqEditors ...RequestEditorFn) (*GetDebugPprofHeapResponse, error) {
	rsp, err := c.GetDebugPprofHeap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofHeapResponse(rsp)
}

// GetDebugPprofProfileWithResponse request returning *GetDebugPprofProfileResponse
func (c *ClientWithResponses) GetDebugPprofProfileWithResponse(ctx context.Context, params *GetDebugPprofProfileParams, reqEditors ...RequestEditorFn) (*GetDebugPprofProfileResponse, error) {
	rsp, err := c.GetDebugPprofProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofProfileResponse(rsp)
}

// GetDebugPprofSymbolWithResponse request returning *GetDebugPprofSymbolResponse
func (c *ClientWithResponses) GetDebugPprofSymbolWithResponse(ctx context.Context, params *GetDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*GetDebugPprofSymbolResponse, error) {
	rsp, err := c.GetDebugPprofSymbol(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofSymbolResponse(rsp)
}

// PostDebugPprofSymbolWithResponse request returning *PostDebugPprofSymbolResponse
func (c *ClientWithResponses) PostDebugPprofSymbolWithResponse(ctx context.Context, params *PostDebugPprofSymbolParams, reqEditors ...RequestEditorFn) (*PostDebugPprofSymbolResponse, error) {
	rsp, err := c.PostDebugPprofSymbol(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDebugPprofSymbolResponse(rsp)
}

// GetDebugPprofThreadcreateWithResponse request returning *GetDebugPprofThreadcreateResponse
func (c *ClientWithResponses) GetDebugPprofThreadcreateWithResponse(ctx context.Context, params *GetDebugPprofThreadcreateParams, reqEditors ...RequestEditorFn) (*GetDebugPprofThreadcreateResponse, error) {
	rsp, err := c.GetDebugPprofThreadcreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofThreadcreateResponse(rsp)
}

// GetDebugPprofTraceWithResponse request returning *GetDebugPprofTraceResponse
func (c *ClientWithResponses) GetDebugPprofTraceWithResponse(ctx context.Context, params *GetDebugPprofTraceParams, reqEditors ...RequestEditorFn) (*GetDebugPprofTraceResponse, error) {
	rsp, err := c.GetDebugPprofTrace(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugPprofTraceResponse(rsp)
}

// GetForgesWithResponse request returning *GetForgesResponse
func (c *ClientWithResponses) GetForgesWithResponse(ctx context.Context, params *GetForgesParams, reqEditors ...RequestEditorFn) (*GetForgesResponse, error) {
	rsp, err := c.GetForges(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetForgesResponse(rsp)
}

// PostForgesWithBodyWithResponse request with arbitrary body returning *PostForgesResponse
func (c *ClientWithResponses) PostForgesWithBodyWithResponse(ctx context.Context, params *PostForgesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostForgesResponse, error) {
	rsp, err := c.PostForgesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostForgesResponse(rsp)
}

// DeleteForgesForgeIdWithResponse request returning *DeleteForgesForgeIdResponse
func (c *ClientWithResponses) DeleteForgesForgeIdWithResponse(ctx context.Context, forgeId int, params *DeleteForgesForgeIdParams, reqEditors ...RequestEditorFn) (*DeleteForgesForgeIdResponse, error) {
	rsp, err := c.DeleteForgesForgeId(ctx, forgeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteForgesForgeIdResponse(rsp)
}

// GetForgesForgeIdWithResponse request returning *GetForgesForgeIdResponse
func (c *ClientWithResponses) GetForgesForgeIdWithResponse(ctx context.Context, forgeId int, params *GetForgesForgeIdParams, reqEditors ...RequestEditorFn) (*GetForgesForgeIdResponse, error) {
	rsp, err := c.GetForgesForgeId(ctx, forgeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetForgesForgeIdResponse(rsp)
}

// PatchForgesForgeIdWithBodyWithResponse request with arbitrary body returning *PatchForgesForgeIdResponse
func (c *ClientWithResponses) PatchForgesForgeIdWithBodyWithResponse(ctx context.Context, forgeId int, params *PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchForgesForgeIdResponse, error) {
	rsp, err := c.PatchForgesForgeIdWithBody(ctx, forgeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchForgesForgeIdResponse(rsp)
}

// GetHealthzWithResponse request returning *GetHealthzResponse
func (c *ClientWithResponses) GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzResponse, error) {
	rsp, err := c.GetHealthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthzResponse(rsp)
}

// PostHookWithBodyWithResponse request with arbitrary body returning *PostHookResponse
func (c *ClientWithResponses) PostHookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHookResponse, error) {
	rsp, err := c.PostHookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHookResponse(rsp)
}

// GetLogLevelWithResponse request returning *GetLogLevelResponse
func (c *ClientWithResponses) GetLogLevelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogLevelResponse, error) {
	rsp, err := c.GetLogLevel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogLevelResponse(rsp)
}

// PostLogLevelWithBodyWithResponse request with arbitrary body returning *PostLogLevelResponse
func (c *ClientWithResponses) PostLogLevelWithBodyWithResponse(ctx context.Context, params *PostLogLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLogLevelResponse, error) {
	rsp, err := c.PostLogLevelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogLevelResponse(rsp)
}

// GetOrgLookupOrgFullNameWithResponse request returning *GetOrgLookupOrgFullNameResponse
func (c *ClientWithResponses) GetOrgLookupOrgFullNameWithResponse(ctx context.Context, orgFullName string, params *GetOrgLookupOrgFullNameParams, reqEditors ...RequestEditorFn) (*GetOrgLookupOrgFullNameResponse, error) {
	rsp, err := c.GetOrgLookupOrgFullName(ctx, orgFullName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgLookupOrgFullNameResponse(rsp)
}

// GetOrgsWithResponse request returning *GetOrgsResponse
func (c *ClientWithResponses) GetOrgsWithResponse(ctx context.Context, params *GetOrgsParams, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error) {
	rsp, err := c.GetOrgs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsResponse(rsp)
}

// DeleteOrgsIdWithResponse request returning *DeleteOrgsIdResponse
func (c *ClientWithResponses) DeleteOrgsIdWithResponse(ctx context.Context, id string, params *DeleteOrgsIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsIdResponse, error) {
	rsp, err := c.DeleteOrgsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsIdResponse(rsp)
}

// GetOrgsOrgIdWithResponse request returning *GetOrgsOrgIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error) {
	rsp, err := c.GetOrgsOrgId(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResponse(rsp)
}

// GetOrgsOrgIdAgentsWithResponse request returning *GetOrgsOrgIdAgentsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAgentsWithResponse(ctx context.Context, orgId int, params *GetOrgsOrgIdAgentsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAgentsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAgents(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAgentsResponse(rsp)
}

// PostOrgsOrgIdAgentsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAgentsResponse
func (c *ClientWithResponses) PostOrgsOrgIdAgentsWithBodyWithResponse(ctx context.Context, orgId int, params *PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAgentsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAgentsWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAgentsResponse(rsp)
}

// DeleteOrgsOrgIdAgentsAgentIdWithResponse request returning *DeleteOrgsOrgIdAgentsAgentIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAgentsAgentIdWithResponse(ctx context.Context, orgId int, agentId int, params *DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAgentsAgentIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAgentsAgentId(ctx, orgId, agentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAgentsAgentIdResponse(rsp)
}

// PatchOrgsOrgIdAgentsAgentIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAgentsAgentIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAgentsAgentIdWithBodyWithResponse(ctx context.Context, orgId int, agentId int, params *PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAgentsAgentIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAgentsAgentIdWithBody(ctx, orgId, agentId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAgentsAgentIdResponse(rsp)
}

// GetOrgsOrgIdPermissionsWithResponse request returning *GetOrgsOrgIdPermissionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdPermissionsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdPermissionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdPermissions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdPermissionsResponse(rsp)
}

// GetOrgsOrgIdRegistriesWithResponse request returning *GetOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdRegistriesParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistries(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesResponse(rsp)
}

// PostOrgsOrgIdRegistriesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistriesWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

// DeleteOrgsOrgIdRegistriesRegistryWithResponse request returning *DeleteOrgsOrgIdRegistriesRegistryResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdRegistriesRegistryWithResponse(ctx context.Context, orgId string, registry string, params *DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegistryResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdRegistriesRegistry(ctx, orgId, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdRegistriesRegistryResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegistryWithResponse request returning *GetOrgsOrgIdRegistriesRegistryResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegistryWithResponse(ctx context.Context, orgId string, registry string, params *GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegistryResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegistry(ctx, orgId, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegistryResponse(rsp)
}

// PatchOrgsOrgIdRegistriesRegistryWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdRegistriesRegistryResponse
func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegistryWithBodyWithResponse(ctx context.Context, orgId string, registry string, params *PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegistryResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegistryWithBody(ctx, orgId, registry, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegistryResponse(rsp)
}

// GetOrgsOrgIdSecretsWithResponse request returning *GetOrgsOrgIdSecretsResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdSecretsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretsResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecrets(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretsResponse(rsp)
}

// PostOrgsOrgIdSecretsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdSecretsResponse
func (c *ClientWithResponses) PostOrgsOrgIdSecretsWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdSecretsResponse, error) {
	rsp, err := c.PostOrgsOrgIdSecretsWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdSecretsResponse(rsp)
}

// DeleteOrgsOrgIdSecretsSecretWithResponse request returning *DeleteOrgsOrgIdSecretsSecretResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdSecretsSecretWithResponse(ctx context.Context, orgId string, secret string, params *DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdSecretsSecretResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdSecretsSecret(ctx, orgId, secret, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdSecretsSecretResponse(rsp)
}

// GetOrgsOrgIdSecretsSecretWithResponse request returning *GetOrgsOrgIdSecretsSecretResponse
func (c *ClientWithResponses) GetOrgsOrgIdSecretsSecretWithResponse(ctx context.Context, orgId string, secret string, params *GetOrgsOrgIdSecretsSecretParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdSecretsSecretResponse, error) {
	rsp, err := c.GetOrgsOrgIdSecretsSecret(ctx, orgId, secret, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdSecretsSecretResponse(rsp)
}

// PatchOrgsOrgIdSecretsSecretWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdSecretsSecretResponse
func (c *ClientWithResponses) PatchOrgsOrgIdSecretsSecretWithBodyWithResponse(ctx context.Context, orgId string, secret string, params *PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdSecretsSecretResponse, error) {
	rsp, err := c.PatchOrgsOrgIdSecretsSecretWithBody(ctx, orgId, secret, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdSecretsSecretResponse(rsp)
}

// GetPipelinesWithResponse request returning *GetPipelinesResponse
func (c *ClientWithResponses) GetPipelinesWithResponse(ctx context.Context, params *GetPipelinesParams, reqEditors ...RequestEditorFn) (*GetPipelinesResponse, error) {
	rsp, err := c.GetPipelines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelinesResponse(rsp)
}

// GetQueueInfoWithResponse request returning *GetQueueInfoResponse
func (c *ClientWithResponses) GetQueueInfoWithResponse(ctx context.Context, params *GetQueueInfoParams, reqEditors ...RequestEditorFn) (*GetQueueInfoResponse, error) {
	rsp, err := c.GetQueueInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueueInfoResponse(rsp)
}

// GetQueueNorunningpipelinesWithResponse request returning *GetQueueNorunningpipelinesResponse
func (c *ClientWithResponses) GetQueueNorunningpipelinesWithResponse(ctx context.Context, params *GetQueueNorunningpipelinesParams, reqEditors ...RequestEditorFn) (*GetQueueNorunningpipelinesResponse, error) {
	rsp, err := c.GetQueueNorunningpipelines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueueNorunningpipelinesResponse(rsp)
}

// PostQueuePauseWithResponse request returning *PostQueuePauseResponse
func (c *ClientWithResponses) PostQueuePauseWithResponse(ctx context.Context, params *PostQueuePauseParams, reqEditors ...RequestEditorFn) (*PostQueuePauseResponse, error) {
	rsp, err := c.PostQueuePause(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueuePauseResponse(rsp)
}

// PostQueueResumeWithResponse request returning *PostQueueResumeResponse
func (c *ClientWithResponses) PostQueueResumeWithResponse(ctx context.Context, params *PostQueueResumeParams, reqEditors ...RequestEditorFn) (*PostQueueResumeResponse, error) {
	rsp, err := c.PostQueueResume(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueueResumeResponse(rsp)
}

// GetRegistriesWithResponse request returning *GetRegistriesResponse
func (c *ClientWithResponses) GetRegistriesWithResponse(ctx context.Context, params *GetRegistriesParams, reqEditors ...RequestEditorFn) (*GetRegistriesResponse, error) {
	rsp, err := c.GetRegistries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistriesResponse(rsp)
}

// PostRegistriesWithBodyWithResponse request with arbitrary body returning *PostRegistriesResponse
func (c *ClientWithResponses) PostRegistriesWithBodyWithResponse(ctx context.Context, params *PostRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegistriesResponse, error) {
	rsp, err := c.PostRegistriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegistriesResponse(rsp)
}

// DeleteRegistriesRegistryWithResponse request returning *DeleteRegistriesRegistryResponse
func (c *ClientWithResponses) DeleteRegistriesRegistryWithResponse(ctx context.Context, registry string, params *DeleteRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteRegistriesRegistryResponse, error) {
	rsp, err := c.DeleteRegistriesRegistry(ctx, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegistriesRegistryResponse(rsp)
}

// GetRegistriesRegistryWithResponse request returning *GetRegistriesRegistryResponse
func (c *ClientWithResponses) GetRegistriesRegistryWithResponse(ctx context.Context, registry string, params *GetRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetRegistriesRegistryResponse, error) {
	rsp, err := c.GetRegistriesRegistry(ctx, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistriesRegistryResponse(rsp)
}

// PatchRegistriesRegistryWithBodyWithResponse request with arbitrary body returning *PatchRegistriesRegistryResponse
func (c *ClientWithResponses) PatchRegistriesRegistryWithBodyWithResponse(ctx context.Context, registry string, params *PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRegistriesRegistryResponse, error) {
	rsp, err := c.PatchRegistriesRegistryWithBody(ctx, registry, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRegistriesRegistryResponse(rsp)
}

// GetReposWithResponse request returning *GetReposResponse
func (c *ClientWithResponses) GetReposWithResponse(ctx context.Context, params *GetReposParams, reqEditors ...RequestEditorFn) (*GetReposResponse, error) {
	rsp, err := c.GetRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposResponse(rsp)
}

// PostReposWithResponse request returning *PostReposResponse
func (c *ClientWithResponses) PostReposWithResponse(ctx context.Context, params *PostReposParams, reqEditors ...RequestEditorFn) (*PostReposResponse, error) {
	rsp, err := c.PostRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposResponse(rsp)
}

// GetReposLookupRepoFullNameWithResponse request returning *GetReposLookupRepoFullNameResponse
func (c *ClientWithResponses) GetReposLookupRepoFullNameWithResponse(ctx context.Context, repoFullName string, params *GetReposLookupRepoFullNameParams, reqEditors ...RequestEditorFn) (*GetReposLookupRepoFullNameResponse, error) {
	rsp, err := c.GetReposLookupRepoFullName(ctx, repoFullName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposLookupRepoFullNameResponse(rsp)
}

// PostReposRepairWithResponse request returning *PostReposRepairResponse
func (c *ClientWithResponses) PostReposRepairWithResponse(ctx context.Context, params *PostReposRepairParams, reqEditors ...RequestEditorFn) (*PostReposRepairResponse, error) {
	rsp, err := c.PostReposRepair(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepairResponse(rsp)
}

// DeleteReposRepoIdWithResponse request returning *DeleteReposRepoIdResponse
func (c *ClientWithResponses) DeleteReposRepoIdWithResponse(ctx context.Context, repoId int, params *DeleteReposRepoIdParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdResponse, error) {
	rsp, err := c.DeleteReposRepoId(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdResponse(rsp)
}

// GetReposRepoIdWithResponse request returning *GetReposRepoIdResponse
func (c *ClientWithResponses) GetReposRepoIdWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdResponse, error) {
	rsp, err := c.GetReposRepoId(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdResponse(rsp)
}

// PatchReposRepoIdWithBodyWithResponse request with arbitrary body returning *PatchReposRepoIdResponse
func (c *ClientWithResponses) PatchReposRepoIdWithBodyWithResponse(ctx context.Context, repoId int, params *PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdResponse, error) {
	rsp, err := c.PatchReposRepoIdWithBody(ctx, repoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReposRepoIdResponse(rsp)
}

// GetReposRepoIdBranchesWithResponse request returning *GetReposRepoIdBranchesResponse
func (c *ClientWithResponses) GetReposRepoIdBranchesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdBranchesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdBranchesResponse, error) {
	rsp, err := c.GetReposRepoIdBranches(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdBranchesResponse(rsp)
}

// PostReposRepoIdChownWithResponse request returning *PostReposRepoIdChownResponse
func (c *ClientWithResponses) PostReposRepoIdChownWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdChownParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdChownResponse, error) {
	rsp, err := c.PostReposRepoIdChown(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdChownResponse(rsp)
}

// GetReposRepoIdCronWithResponse request returning *GetReposRepoIdCronResponse
func (c *ClientWithResponses) GetReposRepoIdCronWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdCronParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdCronResponse, error) {
	rsp, err := c.GetReposRepoIdCron(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdCronResponse(rsp)
}

// PostReposRepoIdCronWithBodyWithResponse request with arbitrary body returning *PostReposRepoIdCronResponse
func (c *ClientWithResponses) PostReposRepoIdCronWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdCronResponse, error) {
	rsp, err := c.PostReposRepoIdCronWithBody(ctx, repoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdCronResponse(rsp)
}

// DeleteReposRepoIdCronCronWithResponse request returning *DeleteReposRepoIdCronCronResponse
func (c *ClientWithResponses) DeleteReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *DeleteReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdCronCronResponse, error) {
	rsp, err := c.DeleteReposRepoIdCronCron(ctx, repoId, cron, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdCronCronResponse(rsp)
}

// GetReposRepoIdCronCronWithResponse request returning *GetReposRepoIdCronCronResponse
func (c *ClientWithResponses) GetReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *GetReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdCronCronResponse, error) {
	rsp, err := c.GetReposRepoIdCronCron(ctx, repoId, cron, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdCronCronResponse(rsp)
}

// PatchReposRepoIdCronCronWithBodyWithResponse request with arbitrary body returning *PatchReposRepoIdCronCronResponse
func (c *ClientWithResponses) PatchReposRepoIdCronCronWithBodyWithResponse(ctx context.Context, repoId int, cron string, params *PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdCronCronResponse, error) {
	rsp, err := c.PatchReposRepoIdCronCronWithBody(ctx, repoId, cron, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReposRepoIdCronCronResponse(rsp)
}

// PostReposRepoIdCronCronWithResponse request returning *PostReposRepoIdCronCronResponse
func (c *ClientWithResponses) PostReposRepoIdCronCronWithResponse(ctx context.Context, repoId int, cron string, params *PostReposRepoIdCronCronParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdCronCronResponse, error) {
	rsp, err := c.PostReposRepoIdCronCron(ctx, repoId, cron, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdCronCronResponse(rsp)
}

// DeleteReposRepoIdLogsNumberWithResponse request returning *DeleteReposRepoIdLogsNumberResponse
func (c *ClientWithResponses) DeleteReposRepoIdLogsNumberWithResponse(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdLogsNumberParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdLogsNumberResponse, error) {
	rsp, err := c.DeleteReposRepoIdLogsNumber(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdLogsNumberResponse(rsp)
}

// GetReposRepoIdLogsNumberStepIDWithResponse request returning *GetReposRepoIdLogsNumberStepIDResponse
func (c *ClientWithResponses) GetReposRepoIdLogsNumberStepIDWithResponse(ctx context.Context, repoId int, number int, stepID int, params *GetReposRepoIdLogsNumberStepIDParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdLogsNumberStepIDResponse, error) {
	rsp, err := c.GetReposRepoIdLogsNumberStepID(ctx, repoId, number, stepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdLogsNumberStepIDResponse(rsp)
}

// DeleteReposRepoIdLogsNumberStepIdWithResponse request returning *DeleteReposRepoIdLogsNumberStepIdResponse
func (c *ClientWithResponses) DeleteReposRepoIdLogsNumberStepIdWithResponse(ctx context.Context, repoId int, number int, stepId int, params *DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdLogsNumberStepIdResponse, error) {
	rsp, err := c.DeleteReposRepoIdLogsNumberStepId(ctx, repoId, number, stepId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdLogsNumberStepIdResponse(rsp)
}

// PostReposRepoIdMoveWithResponse request returning *PostReposRepoIdMoveResponse
func (c *ClientWithResponses) PostReposRepoIdMoveWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdMoveParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdMoveResponse, error) {
	rsp, err := c.PostReposRepoIdMove(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdMoveResponse(rsp)
}

// GetReposRepoIdPermissionsWithResponse request returning *GetReposRepoIdPermissionsResponse
func (c *ClientWithResponses) GetReposRepoIdPermissionsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPermissionsResponse, error) {
	rsp, err := c.GetReposRepoIdPermissions(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPermissionsResponse(rsp)
}

// GetReposRepoIdPipelinesWithResponse request returning *GetReposRepoIdPipelinesResponse
func (c *ClientWithResponses) GetReposRepoIdPipelinesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPipelinesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesResponse, error) {
	rsp, err := c.GetReposRepoIdPipelines(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPipelinesResponse(rsp)
}

// PostReposRepoIdPipelinesWithBodyWithResponse request with arbitrary body returning *PostReposRepoIdPipelinesResponse
func (c *ClientWithResponses) PostReposRepoIdPipelinesWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesResponse, error) {
	rsp, err := c.PostReposRepoIdPipelinesWithBody(ctx, repoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdPipelinesResponse(rsp)
}

// DeleteReposRepoIdPipelinesNumberWithResponse request returning *DeleteReposRepoIdPipelinesNumberResponse
func (c *ClientWithResponses) DeleteReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *DeleteReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdPipelinesNumberResponse, error) {
	rsp, err := c.DeleteReposRepoIdPipelinesNumber(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdPipelinesNumberResponse(rsp)
}

// GetReposRepoIdPipelinesNumberWithResponse request returning *GetReposRepoIdPipelinesNumberResponse
func (c *ClientWithResponses) GetReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberResponse, error) {
	rsp, err := c.GetReposRepoIdPipelinesNumber(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPipelinesNumberResponse(rsp)
}

// PostReposRepoIdPipelinesNumberWithResponse request returning *PostReposRepoIdPipelinesNumberResponse
func (c *ClientWithResponses) PostReposRepoIdPipelinesNumberWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberResponse, error) {
	rsp, err := c.PostReposRepoIdPipelinesNumber(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdPipelinesNumberResponse(rsp)
}

// PostReposRepoIdPipelinesNumberApproveWithResponse request returning *PostReposRepoIdPipelinesNumberApproveResponse
func (c *ClientWithResponses) PostReposRepoIdPipelinesNumberApproveWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberApproveResponse, error) {
	rsp, err := c.PostReposRepoIdPipelinesNumberApprove(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdPipelinesNumberApproveResponse(rsp)
}

// PostReposRepoIdPipelinesNumberCancelWithResponse request returning *PostReposRepoIdPipelinesNumberCancelResponse
func (c *ClientWithResponses) PostReposRepoIdPipelinesNumberCancelWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberCancelResponse, error) {
	rsp, err := c.PostReposRepoIdPipelinesNumberCancel(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdPipelinesNumberCancelResponse(rsp)
}

// GetReposRepoIdPipelinesNumberConfigWithResponse request returning *GetReposRepoIdPipelinesNumberConfigResponse
func (c *ClientWithResponses) GetReposRepoIdPipelinesNumberConfigWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberConfigResponse, error) {
	rsp, err := c.GetReposRepoIdPipelinesNumberConfig(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPipelinesNumberConfigResponse(rsp)
}

// PostReposRepoIdPipelinesNumberDeclineWithResponse request returning *PostReposRepoIdPipelinesNumberDeclineResponse
func (c *ClientWithResponses) PostReposRepoIdPipelinesNumberDeclineWithResponse(ctx context.Context, repoId int, number int, params *PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdPipelinesNumberDeclineResponse, error) {
	rsp, err := c.PostReposRepoIdPipelinesNumberDecline(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdPipelinesNumberDeclineResponse(rsp)
}

// GetReposRepoIdPipelinesNumberMetadataWithResponse request returning *GetReposRepoIdPipelinesNumberMetadataResponse
func (c *ClientWithResponses) GetReposRepoIdPipelinesNumberMetadataWithResponse(ctx context.Context, repoId int, number int, params *GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPipelinesNumberMetadataResponse, error) {
	rsp, err := c.GetReposRepoIdPipelinesNumberMetadata(ctx, repoId, number, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPipelinesNumberMetadataResponse(rsp)
}

// GetReposRepoIdPullRequestsWithResponse request returning *GetReposRepoIdPullRequestsResponse
func (c *ClientWithResponses) GetReposRepoIdPullRequestsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdPullRequestsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdPullRequestsResponse, error) {
	rsp, err := c.GetReposRepoIdPullRequests(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdPullRequestsResponse(rsp)
}

// GetReposRepoIdRegistriesWithResponse request returning *GetReposRepoIdRegistriesResponse
func (c *ClientWithResponses) GetReposRepoIdRegistriesWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdRegistriesParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdRegistriesResponse, error) {
	rsp, err := c.GetReposRepoIdRegistries(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdRegistriesResponse(rsp)
}

// PostReposRepoIdRegistriesWithBodyWithResponse request with arbitrary body returning *PostReposRepoIdRegistriesResponse
func (c *ClientWithResponses) PostReposRepoIdRegistriesWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdRegistriesResponse, error) {
	rsp, err := c.PostReposRepoIdRegistriesWithBody(ctx, repoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdRegistriesResponse(rsp)
}

// DeleteReposRepoIdRegistriesRegistryWithResponse request returning *DeleteReposRepoIdRegistriesRegistryResponse
func (c *ClientWithResponses) DeleteReposRepoIdRegistriesRegistryWithResponse(ctx context.Context, repoId int, registry string, params *DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdRegistriesRegistryResponse, error) {
	rsp, err := c.DeleteReposRepoIdRegistriesRegistry(ctx, repoId, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdRegistriesRegistryResponse(rsp)
}

// GetReposRepoIdRegistriesRegistryWithResponse request returning *GetReposRepoIdRegistriesRegistryResponse
func (c *ClientWithResponses) GetReposRepoIdRegistriesRegistryWithResponse(ctx context.Context, repoId int, registry string, params *GetReposRepoIdRegistriesRegistryParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdRegistriesRegistryResponse, error) {
	rsp, err := c.GetReposRepoIdRegistriesRegistry(ctx, repoId, registry, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdRegistriesRegistryResponse(rsp)
}

// PatchReposRepoIdRegistriesRegistryWithBodyWithResponse request with arbitrary body returning *PatchReposRepoIdRegistriesRegistryResponse
func (c *ClientWithResponses) PatchReposRepoIdRegistriesRegistryWithBodyWithResponse(ctx context.Context, repoId int, registry string, params *PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdRegistriesRegistryResponse, error) {
	rsp, err := c.PatchReposRepoIdRegistriesRegistryWithBody(ctx, repoId, registry, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReposRepoIdRegistriesRegistryResponse(rsp)
}

// PostReposRepoIdRepairWithResponse request returning *PostReposRepoIdRepairResponse
func (c *ClientWithResponses) PostReposRepoIdRepairWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdRepairParams, reqEditors ...RequestEditorFn) (*PostReposRepoIdRepairResponse, error) {
	rsp, err := c.PostReposRepoIdRepair(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdRepairResponse(rsp)
}

// GetReposRepoIdSecretsWithResponse request returning *GetReposRepoIdSecretsResponse
func (c *ClientWithResponses) GetReposRepoIdSecretsWithResponse(ctx context.Context, repoId int, params *GetReposRepoIdSecretsParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdSecretsResponse, error) {
	rsp, err := c.GetReposRepoIdSecrets(ctx, repoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdSecretsResponse(rsp)
}

// PostReposRepoIdSecretsWithBodyWithResponse request with arbitrary body returning *PostReposRepoIdSecretsResponse
func (c *ClientWithResponses) PostReposRepoIdSecretsWithBodyWithResponse(ctx context.Context, repoId int, params *PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReposRepoIdSecretsResponse, error) {
	rsp, err := c.PostReposRepoIdSecretsWithBody(ctx, repoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReposRepoIdSecretsResponse(rsp)
}

// DeleteReposRepoIdSecretsSecretNameWithResponse request returning *DeleteReposRepoIdSecretsSecretNameResponse
func (c *ClientWithResponses) DeleteReposRepoIdSecretsSecretNameWithResponse(ctx context.Context, repoId int, secretName string, params *DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*DeleteReposRepoIdSecretsSecretNameResponse, error) {
	rsp, err := c.DeleteReposRepoIdSecretsSecretName(ctx, repoId, secretName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReposRepoIdSecretsSecretNameResponse(rsp)
}

// GetReposRepoIdSecretsSecretNameWithResponse request returning *GetReposRepoIdSecretsSecretNameResponse
func (c *ClientWithResponses) GetReposRepoIdSecretsSecretNameWithResponse(ctx context.Context, repoId int, secretName string, params *GetReposRepoIdSecretsSecretNameParams, reqEditors ...RequestEditorFn) (*GetReposRepoIdSecretsSecretNameResponse, error) {
	rsp, err := c.GetReposRepoIdSecretsSecretName(ctx, repoId, secretName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReposRepoIdSecretsSecretNameResponse(rsp)
}

// PatchReposRepoIdSecretsSecretNameWithBodyWithResponse request with arbitrary body returning *PatchReposRepoIdSecretsSecretNameResponse
func (c *ClientWithResponses) PatchReposRepoIdSecretsSecretNameWithBodyWithResponse(ctx context.Context, repoId int, secretName string, params *PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReposRepoIdSecretsSecretNameResponse, error) {
	rsp, err := c.PatchReposRepoIdSecretsSecretNameWithBody(ctx, repoId, secretName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReposRepoIdSecretsSecretNameResponse(rsp)
}

// GetSecretsWithResponse request returning *GetSecretsResponse
func (c *ClientWithResponses) GetSecretsWithResponse(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error) {
	rsp, err := c.GetSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretsResponse(rsp)
}

// PostSecretsWithBodyWithResponse request with arbitrary body returning *PostSecretsResponse
func (c *ClientWithResponses) PostSecretsWithBodyWithResponse(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error) {
	rsp, err := c.PostSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretsResponse(rsp)
}

// DeleteSecretsSecretWithResponse request returning *DeleteSecretsSecretResponse
func (c *ClientWithResponses) DeleteSecretsSecretWithResponse(ctx context.Context, secret string, params *DeleteSecretsSecretParams, reqEditors ...RequestEditorFn) (*DeleteSecretsSecretResponse, error) {
	rsp, err := c.DeleteSecretsSecret(ctx, secret, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretsSecretResponse(rsp)
}

// GetSecretsSecretWithResponse request returning *GetSecretsSecretResponse
func (c *ClientWithResponses) GetSecretsSecretWithResponse(ctx context.Context, secret string, params *GetSecretsSecretParams, reqEditors ...RequestEditorFn) (*GetSecretsSecretResponse, error) {
	rsp, err := c.GetSecretsSecret(ctx, secret, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretsSecretResponse(rsp)
}

// PatchSecretsSecretWithBodyWithResponse request with arbitrary body returning *PatchSecretsSecretResponse
func (c *ClientWithResponses) PatchSecretsSecretWithBodyWithResponse(ctx context.Context, secret string, params *PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretsSecretResponse, error) {
	rsp, err := c.PatchSecretsSecretWithBody(ctx, secret, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretsSecretResponse(rsp)
}

// GetSignaturePublicKeyWithResponse request returning *GetSignaturePublicKeyResponse
func (c *ClientWithResponses) GetSignaturePublicKeyWithResponse(ctx context.Context, params *GetSignaturePublicKeyParams, reqEditors ...RequestEditorFn) (*GetSignaturePublicKeyResponse, error) {
	rsp, err := c.GetSignaturePublicKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSignaturePublicKeyResponse(rsp)
}

// GetStreamEventsWithResponse request returning *GetStreamEventsResponse
func (c *ClientWithResponses) GetStreamEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStreamEventsResponse, error) {
	rsp, err := c.GetStreamEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamEventsResponse(rsp)
}

// GetStreamLogsRepoIdPipelineStepIDWithResponse request returning *GetStreamLogsRepoIdPipelineStepIDResponse
func (c *ClientWithResponses) GetStreamLogsRepoIdPipelineStepIDWithResponse(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...RequestEditorFn) (*GetStreamLogsRepoIdPipelineStepIDResponse, error) {
	rsp, err := c.GetStreamLogsRepoIdPipelineStepID(ctx, repoId, pipeline, stepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamLogsRepoIdPipelineStepIDResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserFeedWithResponse request returning *GetUserFeedResponse
func (c *ClientWithResponses) GetUserFeedWithResponse(ctx context.Context, params *GetUserFeedParams, reqEditors ...RequestEditorFn) (*GetUserFeedResponse, error) {
	rsp, err := c.GetUserFeed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFeedResponse(rsp)
}

// GetUserReposWithResponse request returning *GetUserReposResponse
func (c *ClientWithResponses) GetUserReposWithResponse(ctx context.Context, params *GetUserReposParams, reqEditors ...RequestEditorFn) (*GetUserReposResponse, error) {
	rsp, err := c.GetUserRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserReposResponse(rsp)
}

// DeleteUserTokenWithResponse request returning *DeleteUserTokenResponse
func (c *ClientWithResponses) DeleteUserTokenWithResponse(ctx context.Context, params *DeleteUserTokenParams, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error) {
	rsp, err := c.DeleteUserToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTokenResponse(rsp)
}

// PostUserTokenWithResponse request returning *PostUserTokenResponse
func (c *ClientWithResponses) PostUserTokenWithResponse(ctx context.Context, params *PostUserTokenParams, reqEditors ...RequestEditorFn) (*PostUserTokenResponse, error) {
	rsp, err := c.PostUserToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTokenResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, params *PostUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// DeleteUsersLoginWithResponse request returning *DeleteUsersLoginResponse
func (c *ClientWithResponses) DeleteUsersLoginWithResponse(ctx context.Context, login string, params *DeleteUsersLoginParams, reqEditors ...RequestEditorFn) (*DeleteUsersLoginResponse, error) {
	rsp, err := c.DeleteUsersLogin(ctx, login, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersLoginResponse(rsp)
}

// GetUsersLoginWithResponse request returning *GetUsersLoginResponse
func (c *ClientWithResponses) GetUsersLoginWithResponse(ctx context.Context, login string, params *GetUsersLoginParams, reqEditors ...RequestEditorFn) (*GetUsersLoginResponse, error) {
	rsp, err := c.GetUsersLogin(ctx, login, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersLoginResponse(rsp)
}

// PatchUsersLoginWithBodyWithResponse request with arbitrary body returning *PatchUsersLoginResponse
func (c *ClientWithResponses) PatchUsersLoginWithBodyWithResponse(ctx context.Context, login string, params *PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersLoginResponse, error) {
	rsp, err := c.PatchUsersLoginWithBody(ctx, login, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersLoginResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersLoginWithResponse(ctx context.Context, login string, params *PatchUsersLoginParams, body PatchUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersLoginResponse, error) {
	rsp, err := c.PatchUsersLogin(ctx, login, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersLoginResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetAgentsResponse parses an HTTP response from a GetAgentsWithResponse call
func ParseGetAgentsResponse(rsp *http.Response) (*GetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAgentsResponse parses an HTTP response from a PostAgentsWithResponse call
func ParsePostAgentsResponse(rsp *http.Response) (*PostAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAgentsAgentIdResponse parses an HTTP response from a DeleteAgentsAgentIdWithResponse call
func ParseDeleteAgentsAgentIdResponse(rsp *http.Response) (*DeleteAgentsAgentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentsAgentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAgentsAgentIdResponse parses an HTTP response from a GetAgentsAgentIdWithResponse call
func ParseGetAgentsAgentIdResponse(rsp *http.Response) (*GetAgentsAgentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsAgentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAgentsAgentIdResponse parses an HTTP response from a PatchAgentsAgentIdWithResponse call
func ParsePatchAgentsAgentIdResponse(rsp *http.Response) (*PatchAgentsAgentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAgentsAgentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsAgentIdTasksResponse parses an HTTP response from a GetAgentsAgentIdTasksWithResponse call
func ParseGetAgentsAgentIdTasksResponse(rsp *http.Response) (*GetAgentsAgentIdTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsAgentIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBadgesRepoIdCcXmlResponse parses an HTTP response from a GetBadgesRepoIdCcXmlWithResponse call
func ParseGetBadgesRepoIdCcXmlResponse(rsp *http.Response) (*GetBadgesRepoIdCcXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBadgesRepoIdCcXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBadgesRepoIdStatusSvgResponse parses an HTTP response from a GetBadgesRepoIdStatusSvgWithResponse call
func ParseGetBadgesRepoIdStatusSvgResponse(rsp *http.Response) (*GetBadgesRepoIdStatusSvgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBadgesRepoIdStatusSvgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofResponse parses an HTTP response from a GetDebugPprofWithResponse call
func ParseGetDebugPprofResponse(rsp *http.Response) (*GetDebugPprofResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofBlockResponse parses an HTTP response from a GetDebugPprofBlockWithResponse call
func ParseGetDebugPprofBlockResponse(rsp *http.Response) (*GetDebugPprofBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofCmdlineResponse parses an HTTP response from a GetDebugPprofCmdlineWithResponse call
func ParseGetDebugPprofCmdlineResponse(rsp *http.Response) (*GetDebugPprofCmdlineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofCmdlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofGoroutineResponse parses an HTTP response from a GetDebugPprofGoroutineWithResponse call
func ParseGetDebugPprofGoroutineResponse(rsp *http.Response) (*GetDebugPprofGoroutineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofGoroutineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofHeapResponse parses an HTTP response from a GetDebugPprofHeapWithResponse call
func ParseGetDebugPprofHeapResponse(rsp *http.Response) (*GetDebugPprofHeapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofHeapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofProfileResponse parses an HTTP response from a GetDebugPprofProfileWithResponse call
func ParseGetDebugPprofProfileResponse(rsp *http.Response) (*GetDebugPprofProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofSymbolResponse parses an HTTP response from a GetDebugPprofSymbolWithResponse call
func ParseGetDebugPprofSymbolResponse(rsp *http.Response) (*GetDebugPprofSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDebugPprofSymbolResponse parses an HTTP response from a PostDebugPprofSymbolWithResponse call
func ParsePostDebugPprofSymbolResponse(rsp *http.Response) (*PostDebugPprofSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDebugPprofSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofThreadcreateResponse parses an HTTP response from a GetDebugPprofThreadcreateWithResponse call
func ParseGetDebugPprofThreadcreateResponse(rsp *http.Response) (*GetDebugPprofThreadcreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofThreadcreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDebugPprofTraceResponse parses an HTTP response from a GetDebugPprofTraceWithResponse call
func ParseGetDebugPprofTraceResponse(rsp *http.Response) (*GetDebugPprofTraceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugPprofTraceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetForgesResponse parses an HTTP response from a GetForgesWithResponse call
func ParseGetForgesResponse(rsp *http.Response) (*GetForgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetForgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Forge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostForgesResponse parses an HTTP response from a PostForgesWithResponse call
func ParsePostForgesResponse(rsp *http.Response) (*PostForgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostForgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Forge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteForgesForgeIdResponse parses an HTTP response from a DeleteForgesForgeIdWithResponse call
func ParseDeleteForgesForgeIdResponse(rsp *http.Response) (*DeleteForgesForgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteForgesForgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetForgesForgeIdResponse parses an HTTP response from a GetForgesForgeIdWithResponse call
func ParseGetForgesForgeIdResponse(rsp *http.Response) (*GetForgesForgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetForgesForgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Forge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchForgesForgeIdResponse parses an HTTP response from a PatchForgesForgeIdWithResponse call
func ParsePatchForgesForgeIdResponse(rsp *http.Response) (*PatchForgesForgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchForgesForgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Forge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthzResponse parses an HTTP response from a GetHealthzWithResponse call
func ParseGetHealthzResponse(rsp *http.Response) (*GetHealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostHookResponse parses an HTTP response from a PostHookWithResponse call
func ParsePostHookResponse(rsp *http.Response) (*PostHookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLogLevelResponse parses an HTTP response from a GetLogLevelWithResponse call
func ParseGetLogLevelResponse(rsp *http.Response) (*GetLogLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LogLevel *string `json:"log-level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLogLevelResponse parses an HTTP response from a PostLogLevelWithResponse call
func ParsePostLogLevelResponse(rsp *http.Response) (*PostLogLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLogLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LogLevel *string `json:"log-level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgLookupOrgFullNameResponse parses an HTTP response from a GetOrgLookupOrgFullNameWithResponse call
func ParseGetOrgLookupOrgFullNameResponse(rsp *http.Response) (*GetOrgLookupOrgFullNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgLookupOrgFullNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Org
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsResponse parses an HTTP response from a GetOrgsWithResponse call
func ParseGetOrgsResponse(rsp *http.Response) (*GetOrgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Org
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsIdResponse parses an HTTP response from a DeleteOrgsIdWithResponse call
func ParseDeleteOrgsIdResponse(rsp *http.Response) (*DeleteOrgsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdResponse parses an HTTP response from a GetOrgsOrgIdWithResponse call
func ParseGetOrgsOrgIdResponse(rsp *http.Response) (*GetOrgsOrgIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Org
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAgentsResponse parses an HTTP response from a GetOrgsOrgIdAgentsWithResponse call
func ParseGetOrgsOrgIdAgentsResponse(rsp *http.Response) (*GetOrgsOrgIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAgentsResponse parses an HTTP response from a PostOrgsOrgIdAgentsWithResponse call
func ParsePostOrgsOrgIdAgentsResponse(rsp *http.Response) (*PostOrgsOrgIdAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAgentsAgentIdResponse parses an HTTP response from a DeleteOrgsOrgIdAgentsAgentIdWithResponse call
func ParseDeleteOrgsOrgIdAgentsAgentIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAgentsAgentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAgentsAgentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchOrgsOrgIdAgentsAgentIdResponse parses an HTTP response from a PatchOrgsOrgIdAgentsAgentIdWithResponse call
func ParsePatchOrgsOrgIdAgentsAgentIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAgentsAgentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAgentsAgentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Agent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdPermissionsResponse parses an HTTP response from a GetOrgsOrgIdPermissionsWithResponse call
func ParseGetOrgsOrgIdPermissionsResponse(rsp *http.Response) (*GetOrgsOrgIdPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrgPerm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesResponse parses an HTTP response from a GetOrgsOrgIdRegistriesWithResponse call
func ParseGetOrgsOrgIdRegistriesResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdRegistriesResponse parses an HTTP response from a PostOrgsOrgIdRegistriesWithResponse call
func ParsePostOrgsOrgIdRegistriesResponse(rsp *http.Response) (*PostOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdRegistriesRegistryResponse parses an HTTP response from a DeleteOrgsOrgIdRegistriesRegistryWithResponse call
func ParseDeleteOrgsOrgIdRegistriesRegistryResponse(rsp *http.Response) (*DeleteOrgsOrgIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegistryResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegistryWithResponse call
func ParseGetOrgsOrgIdRegistriesRegistryResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdRegistriesRegistryResponse parses an HTTP response from a PatchOrgsOrgIdRegistriesRegistryWithResponse call
func ParsePatchOrgsOrgIdRegistriesRegistryResponse(rsp *http.Response) (*PatchOrgsOrgIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretsResponse parses an HTTP response from a GetOrgsOrgIdSecretsWithResponse call
func ParseGetOrgsOrgIdSecretsResponse(rsp *http.Response) (*GetOrgsOrgIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdSecretsResponse parses an HTTP response from a PostOrgsOrgIdSecretsWithResponse call
func ParsePostOrgsOrgIdSecretsResponse(rsp *http.Response) (*PostOrgsOrgIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdSecretsSecretResponse parses an HTTP response from a DeleteOrgsOrgIdSecretsSecretWithResponse call
func ParseDeleteOrgsOrgIdSecretsSecretResponse(rsp *http.Response) (*DeleteOrgsOrgIdSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdSecretsSecretResponse parses an HTTP response from a GetOrgsOrgIdSecretsSecretWithResponse call
func ParseGetOrgsOrgIdSecretsSecretResponse(rsp *http.Response) (*GetOrgsOrgIdSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdSecretsSecretResponse parses an HTTP response from a PatchOrgsOrgIdSecretsSecretWithResponse call
func ParsePatchOrgsOrgIdSecretsSecretResponse(rsp *http.Response) (*PatchOrgsOrgIdSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPipelinesResponse parses an HTTP response from a GetPipelinesWithResponse call
func ParseGetPipelinesResponse(rsp *http.Response) (*GetPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Feed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueueInfoResponse parses an HTTP response from a GetQueueInfoWithResponse call
func ParseGetQueueInfoResponse(rsp *http.Response) (*GetQueueInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueueInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueueNorunningpipelinesResponse parses an HTTP response from a GetQueueNorunningpipelinesWithResponse call
func ParseGetQueueNorunningpipelinesResponse(rsp *http.Response) (*GetQueueNorunningpipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueueNorunningpipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostQueuePauseResponse parses an HTTP response from a PostQueuePauseWithResponse call
func ParsePostQueuePauseResponse(rsp *http.Response) (*PostQueuePauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueuePauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostQueueResumeResponse parses an HTTP response from a PostQueueResumeWithResponse call
func ParsePostQueueResumeResponse(rsp *http.Response) (*PostQueueResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueueResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRegistriesResponse parses an HTTP response from a GetRegistriesWithResponse call
func ParseGetRegistriesResponse(rsp *http.Response) (*GetRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRegistriesResponse parses an HTTP response from a PostRegistriesWithResponse call
func ParsePostRegistriesResponse(rsp *http.Response) (*PostRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRegistriesRegistryResponse parses an HTTP response from a DeleteRegistriesRegistryWithResponse call
func ParseDeleteRegistriesRegistryResponse(rsp *http.Response) (*DeleteRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRegistriesRegistryResponse parses an HTTP response from a GetRegistriesRegistryWithResponse call
func ParseGetRegistriesRegistryResponse(rsp *http.Response) (*GetRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchRegistriesRegistryResponse parses an HTTP response from a PatchRegistriesRegistryWithResponse call
func ParsePatchRegistriesRegistryResponse(rsp *http.Response) (*PatchRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposResponse parses an HTTP response from a GetReposWithResponse call
func ParseGetReposResponse(rsp *http.Response) (*GetReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposResponse parses an HTTP response from a PostReposWithResponse call
func ParsePostReposResponse(rsp *http.Response) (*PostReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposLookupRepoFullNameResponse parses an HTTP response from a GetReposLookupRepoFullNameWithResponse call
func ParseGetReposLookupRepoFullNameResponse(rsp *http.Response) (*GetReposLookupRepoFullNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposLookupRepoFullNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepairResponse parses an HTTP response from a PostReposRepairWithResponse call
func ParsePostReposRepairResponse(rsp *http.Response) (*PostReposRepairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteReposRepoIdResponse parses an HTTP response from a DeleteReposRepoIdWithResponse call
func ParseDeleteReposRepoIdResponse(rsp *http.Response) (*DeleteReposRepoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdResponse parses an HTTP response from a GetReposRepoIdWithResponse call
func ParseGetReposRepoIdResponse(rsp *http.Response) (*GetReposRepoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReposRepoIdResponse parses an HTTP response from a PatchReposRepoIdWithResponse call
func ParsePatchReposRepoIdResponse(rsp *http.Response) (*PatchReposRepoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReposRepoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdBranchesResponse parses an HTTP response from a GetReposRepoIdBranchesWithResponse call
func ParseGetReposRepoIdBranchesResponse(rsp *http.Response) (*GetReposRepoIdBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdChownResponse parses an HTTP response from a PostReposRepoIdChownWithResponse call
func ParsePostReposRepoIdChownResponse(rsp *http.Response) (*PostReposRepoIdChownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdChownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdCronResponse parses an HTTP response from a GetReposRepoIdCronWithResponse call
func ParseGetReposRepoIdCronResponse(rsp *http.Response) (*GetReposRepoIdCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cron
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdCronResponse parses an HTTP response from a PostReposRepoIdCronWithResponse call
func ParsePostReposRepoIdCronResponse(rsp *http.Response) (*PostReposRepoIdCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cron
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdCronCronResponse parses an HTTP response from a DeleteReposRepoIdCronCronWithResponse call
func ParseDeleteReposRepoIdCronCronResponse(rsp *http.Response) (*DeleteReposRepoIdCronCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdCronCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdCronCronResponse parses an HTTP response from a GetReposRepoIdCronCronWithResponse call
func ParseGetReposRepoIdCronCronResponse(rsp *http.Response) (*GetReposRepoIdCronCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdCronCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cron
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReposRepoIdCronCronResponse parses an HTTP response from a PatchReposRepoIdCronCronWithResponse call
func ParsePatchReposRepoIdCronCronResponse(rsp *http.Response) (*PatchReposRepoIdCronCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReposRepoIdCronCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cron
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdCronCronResponse parses an HTTP response from a PostReposRepoIdCronCronWithResponse call
func ParsePostReposRepoIdCronCronResponse(rsp *http.Response) (*PostReposRepoIdCronCronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdCronCronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdLogsNumberResponse parses an HTTP response from a DeleteReposRepoIdLogsNumberWithResponse call
func ParseDeleteReposRepoIdLogsNumberResponse(rsp *http.Response) (*DeleteReposRepoIdLogsNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdLogsNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdLogsNumberStepIDResponse parses an HTTP response from a GetReposRepoIdLogsNumberStepIDWithResponse call
func ParseGetReposRepoIdLogsNumberStepIDResponse(rsp *http.Response) (*GetReposRepoIdLogsNumberStepIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdLogsNumberStepIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdLogsNumberStepIdResponse parses an HTTP response from a DeleteReposRepoIdLogsNumberStepIdWithResponse call
func ParseDeleteReposRepoIdLogsNumberStepIdResponse(rsp *http.Response) (*DeleteReposRepoIdLogsNumberStepIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdLogsNumberStepIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReposRepoIdMoveResponse parses an HTTP response from a PostReposRepoIdMoveWithResponse call
func ParsePostReposRepoIdMoveResponse(rsp *http.Response) (*PostReposRepoIdMoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdPermissionsResponse parses an HTTP response from a GetReposRepoIdPermissionsWithResponse call
func ParseGetReposRepoIdPermissionsResponse(rsp *http.Response) (*GetReposRepoIdPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Perm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdPipelinesResponse parses an HTTP response from a GetReposRepoIdPipelinesWithResponse call
func ParseGetReposRepoIdPipelinesResponse(rsp *http.Response) (*GetReposRepoIdPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdPipelinesResponse parses an HTTP response from a PostReposRepoIdPipelinesWithResponse call
func ParsePostReposRepoIdPipelinesResponse(rsp *http.Response) (*PostReposRepoIdPipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdPipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdPipelinesNumberResponse parses an HTTP response from a DeleteReposRepoIdPipelinesNumberWithResponse call
func ParseDeleteReposRepoIdPipelinesNumberResponse(rsp *http.Response) (*DeleteReposRepoIdPipelinesNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdPipelinesNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdPipelinesNumberResponse parses an HTTP response from a GetReposRepoIdPipelinesNumberWithResponse call
func ParseGetReposRepoIdPipelinesNumberResponse(rsp *http.Response) (*GetReposRepoIdPipelinesNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPipelinesNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdPipelinesNumberResponse parses an HTTP response from a PostReposRepoIdPipelinesNumberWithResponse call
func ParsePostReposRepoIdPipelinesNumberResponse(rsp *http.Response) (*PostReposRepoIdPipelinesNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdPipelinesNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdPipelinesNumberApproveResponse parses an HTTP response from a PostReposRepoIdPipelinesNumberApproveWithResponse call
func ParsePostReposRepoIdPipelinesNumberApproveResponse(rsp *http.Response) (*PostReposRepoIdPipelinesNumberApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdPipelinesNumberApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdPipelinesNumberCancelResponse parses an HTTP response from a PostReposRepoIdPipelinesNumberCancelWithResponse call
func ParsePostReposRepoIdPipelinesNumberCancelResponse(rsp *http.Response) (*PostReposRepoIdPipelinesNumberCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdPipelinesNumberCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdPipelinesNumberConfigResponse parses an HTTP response from a GetReposRepoIdPipelinesNumberConfigWithResponse call
func ParseGetReposRepoIdPipelinesNumberConfigResponse(rsp *http.Response) (*GetReposRepoIdPipelinesNumberConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPipelinesNumberConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Config
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdPipelinesNumberDeclineResponse parses an HTTP response from a PostReposRepoIdPipelinesNumberDeclineWithResponse call
func ParsePostReposRepoIdPipelinesNumberDeclineResponse(rsp *http.Response) (*PostReposRepoIdPipelinesNumberDeclineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdPipelinesNumberDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdPipelinesNumberMetadataResponse parses an HTTP response from a GetReposRepoIdPipelinesNumberMetadataWithResponse call
func ParseGetReposRepoIdPipelinesNumberMetadataResponse(rsp *http.Response) (*GetReposRepoIdPipelinesNumberMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPipelinesNumberMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdPullRequestsResponse parses an HTTP response from a GetReposRepoIdPullRequestsWithResponse call
func ParseGetReposRepoIdPullRequestsResponse(rsp *http.Response) (*GetReposRepoIdPullRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdPullRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PullRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReposRepoIdRegistriesResponse parses an HTTP response from a GetReposRepoIdRegistriesWithResponse call
func ParseGetReposRepoIdRegistriesResponse(rsp *http.Response) (*GetReposRepoIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdRegistriesResponse parses an HTTP response from a PostReposRepoIdRegistriesWithResponse call
func ParsePostReposRepoIdRegistriesResponse(rsp *http.Response) (*PostReposRepoIdRegistriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdRegistriesRegistryResponse parses an HTTP response from a DeleteReposRepoIdRegistriesRegistryWithResponse call
func ParseDeleteReposRepoIdRegistriesRegistryResponse(rsp *http.Response) (*DeleteReposRepoIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdRegistriesRegistryResponse parses an HTTP response from a GetReposRepoIdRegistriesRegistryWithResponse call
func ParseGetReposRepoIdRegistriesRegistryResponse(rsp *http.Response) (*GetReposRepoIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReposRepoIdRegistriesRegistryResponse parses an HTTP response from a PatchReposRepoIdRegistriesRegistryWithResponse call
func ParsePatchReposRepoIdRegistriesRegistryResponse(rsp *http.Response) (*PatchReposRepoIdRegistriesRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReposRepoIdRegistriesRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdRepairResponse parses an HTTP response from a PostReposRepoIdRepairWithResponse call
func ParsePostReposRepoIdRepairResponse(rsp *http.Response) (*PostReposRepoIdRepairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdRepairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdSecretsResponse parses an HTTP response from a GetReposRepoIdSecretsWithResponse call
func ParseGetReposRepoIdSecretsResponse(rsp *http.Response) (*GetReposRepoIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReposRepoIdSecretsResponse parses an HTTP response from a PostReposRepoIdSecretsWithResponse call
func ParsePostReposRepoIdSecretsResponse(rsp *http.Response) (*PostReposRepoIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReposRepoIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReposRepoIdSecretsSecretNameResponse parses an HTTP response from a DeleteReposRepoIdSecretsSecretNameWithResponse call
func ParseDeleteReposRepoIdSecretsSecretNameResponse(rsp *http.Response) (*DeleteReposRepoIdSecretsSecretNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReposRepoIdSecretsSecretNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReposRepoIdSecretsSecretNameResponse parses an HTTP response from a GetReposRepoIdSecretsSecretNameWithResponse call
func ParseGetReposRepoIdSecretsSecretNameResponse(rsp *http.Response) (*GetReposRepoIdSecretsSecretNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReposRepoIdSecretsSecretNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReposRepoIdSecretsSecretNameResponse parses an HTTP response from a PatchReposRepoIdSecretsSecretNameWithResponse call
func ParsePatchReposRepoIdSecretsSecretNameResponse(rsp *http.Response) (*PatchReposRepoIdSecretsSecretNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReposRepoIdSecretsSecretNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSecretsResponse parses an HTTP response from a GetSecretsWithResponse call
func ParseGetSecretsResponse(rsp *http.Response) (*GetSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecretsResponse parses an HTTP response from a PostSecretsWithResponse call
func ParsePostSecretsResponse(rsp *http.Response) (*PostSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSecretsSecretResponse parses an HTTP response from a DeleteSecretsSecretWithResponse call
func ParseDeleteSecretsSecretResponse(rsp *http.Response) (*DeleteSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecretsSecretResponse parses an HTTP response from a GetSecretsSecretWithResponse call
func ParseGetSecretsSecretResponse(rsp *http.Response) (*GetSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSecretsSecretResponse parses an HTTP response from a PatchSecretsSecretWithResponse call
func ParsePatchSecretsSecretResponse(rsp *http.Response) (*PatchSecretsSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSecretsSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSignaturePublicKeyResponse parses an HTTP response from a GetSignaturePublicKeyWithResponse call
func ParseGetSignaturePublicKeyResponse(rsp *http.Response) (*GetSignaturePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSignaturePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStreamEventsResponse parses an HTTP response from a GetStreamEventsWithResponse call
func ParseGetStreamEventsResponse(rsp *http.Response) (*GetStreamEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStreamLogsRepoIdPipelineStepIDResponse parses an HTTP response from a GetStreamLogsRepoIdPipelineStepIDWithResponse call
func ParseGetStreamLogsRepoIdPipelineStepIDResponse(rsp *http.Response) (*GetStreamLogsRepoIdPipelineStepIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamLogsRepoIdPipelineStepIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserFeedResponse parses an HTTP response from a GetUserFeedWithResponse call
func ParseGetUserFeedResponse(rsp *http.Response) (*GetUserFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Feed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserReposResponse parses an HTTP response from a GetUserReposWithResponse call
func ParseGetUserReposResponse(rsp *http.Response) (*GetUserReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserTokenResponse parses an HTTP response from a DeleteUserTokenWithResponse call
func ParseDeleteUserTokenResponse(rsp *http.Response) (*DeleteUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserTokenResponse parses an HTTP response from a PostUserTokenWithResponse call
func ParsePostUserTokenResponse(rsp *http.Response) (*PostUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsersLoginResponse parses an HTTP response from a DeleteUsersLoginWithResponse call
func ParseDeleteUsersLoginResponse(rsp *http.Response) (*DeleteUsersLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersLoginResponse parses an HTTP response from a GetUsersLoginWithResponse call
func ParseGetUsersLoginResponse(rsp *http.Response) (*GetUsersLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUsersLoginResponse parses an HTTP response from a PatchUsersLoginWithResponse call
func ParsePatchUsersLoginResponse(rsp *http.Response) (*PatchUsersLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Source  *string `json:"source,omitempty"`
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
